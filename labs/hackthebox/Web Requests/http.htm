<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Web Requests</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>
    </div>

    <div id="writeup">
      <h3>
        <a href="../../contents.html">Hack The Box</a>
      </h3>
      <hr>

      <div id="labs-table-top">

        <h4><a href="../webRequests.htm">Web Requests</a></h4>
        <ul>
          <li><a href="http.htm"><b><em>~ HyperText Transfer Protocol (HTTP)</em></b></a></li>
          <li><a href="https.htm">Hypertext Transfer Protocol Secure (HTTPS)</a></li>
        </ul>
      </div>
      <hr>

      <div>
        <h3><em>HyperText Transfer Protocol (HTTP)</em></h3>

        <p>
          Today, the majority of the applications we use constantly interact with the internet, both web and mobile applications. Most internet communications are made with web requests through the HTTP protocol. HTTP is an application-level protocol used to access the World Wide Web resources. The term hypertext stands for text containing links to other resources and text that the readers can easily interpret.
        </p>

        <p>
          HTTP communication consists of a client and a server, where the client requests the server for a resource. The server processes the requests and returns the requested resource. The default port for HTTP communication is port 80, though this can be changed to any other port, depending on the web server configuration. The same requests are utilized when we use the internet to visit different websites. We enter a Fully Qualified Domain Name (FQDN) as a Uniform Resource Locator (URL) to reach the desired website, like www.hackthebox.com.
        </p>

        <h4>URL</h4>

        <p>Resources over HTTP are accessed via a URL, which offers many more specifications than simply specifying a website we want to visit. Let's look at the structure of a URL: url_structure
        <ul>
          <li>
            <a href="https://academy.hackthebox.com/storage/modules/35/url_structure.png">https://academy.hackthebox.com/storage/modules/35/url_structure.png</a>
          </li>
          <li>
            <a href="https://academy.hackthebox.com/storage/modules/35/url_structure.png">https://academy.hackthebox.com/storage/modules/35/url_structure.png</a>
          </li>
        </ul>

        <p>Here is what each component stands for:
        <ul>
          <li>
            <b>Scheme</b> - <em>http://</em> - This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (://)
          </li>

          <li>
            <b>User Info</b> - <em>admin:password@</em> - This is an optional component that contains the credentials (separated by a colon :) used to authenticate to the host, and is separated from the host with an at sign (@)
          </li>

          <li>
            Host inlanefreight.com The host signifies the resource location. This can be a hostname or an IP address
          </li>

          <li>
            <b>Port</b> - <em>:80</em> - The Port is separated from the Host by a colon (:). If no port is specified, http schemes default to port 80 and https default to port 443
          </li>

          <li>
            <b>Path</b> - <em>/dashboard.php</em> - This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. index.html).
          </li>

          <li>
            <b>Query String</b> - <em>?login=true</em> - The query string starts with a question mark (?), and consists of a parameter (e.g. login) and a value (e.g. true). Multiple parameters can be separated by an ampersand (&).
          </li>

          <li>
            <b>Fragments</b> - <em>#status</em> - Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a header or section on the page).
          </li>
        </ul>

        <p>
          Not all components are required to access a resource. The main mandatory fields are the scheme and the host, without which the request would have no resource to request.
        </p>

        <h4>HTTP_Flow</h4>

        <p>
          The diagram presents the anatomy of an HTTP request at a very high level. The first time a user enters the URL (inlanefreight.com) into the browser, it sends a request to a DNS (Domain Name Resolution) server to resolve the domain and get its IP. The DNS server looks up the IP address for inlanefreight.com and returns it. All domain names need to be resolved this way, as a server can't communicate without an IP address.

        <p>
          Note: Our browsers usually first look up records in the local '/etc/hosts' file, and if the requested domain does not exist within it, then they would contact other DNS servers. We can use the '/etc/hosts' to manually add records to for DNS resolution, by adding the IP followed by the domain name.
        </p>

        <p>
          Once the browser gets the IP address linked to the requested domain, it sends a GET request to the default HTTP port (e.g. 80), asking for the root / path. Then, the web server receives the request and processes it. By default, servers are configured to return an index file when a request for / is received.
        </p>

        <p>
          In this case, the contents of index.html are read and returned by the web server as an HTTP response. The response also contains the status code (e.g. 200 OK), which indicates that the request was successfully processed. The web browser then renders the index.html contents and presents it to the user.
        </p>

        <p>
          Note: This module is mainly focused on HTTP web requests. For more on HTML and web applications, you may refer to the Introduction to Web Applications module.
        </p>

        <h4>cURL</h4>

        <p>
          In this module, we will be sending web requests through two of the most important tools for any web penetration tester, a Web Browser, like Chrome or Firefox, and the cURL command line tool.
        </p>

        <p>
          cURL (client URL) is a command-line tool and library that primarily supports HTTP along with many other protocols. This makes it a good candidate for scripts as well as automation, making it essential for sending various types of web requests from the command line, which is necessary for many types of web penetration tests.
        </p>

        <p>We can send a basic HTTP request to any URL by using it as an argument for cURL, as follows:</p>

        <h5>kappajester83@htb[/htb]$ curl inlanefreight.com</h5>

        <p>
          We see that cURL does not render the HTML/JavaScript/CSS code, unlike a web browser, but prints it in its raw format. However, as penetration testers, we are mainly interested in the request and response context, which usually becomes much faster and more convenient than a web browser.
        </p>

        <p>
          We may also use cURL to download a page or a file and output the content into a file using the -O flag. If we want to specify the output file name, we can use the -o flag and specify the name. Otherwise, we can use -O and cURL will use the remote file name, as follows:
        </p>

        <h5>
          kappajester83@htb[/htb]$ curl -O inlanefreight.com/index.html<br>
          kappajester83@htb[/htb]$ ls<br>
          index.html
        </h5>

        <p>
          As we can see, the output was not printed this time but rather saved into index.html. We noticed that cURL still printed some status while processing the request. We can silent the status with the -s flag, as follows:
        </p>

        <h5>kappajester83@htb[/htb]$ curl -s -O inlanefreight.com/index.html</h5>

        <p>
          This time, cURL did not print anything, as the output was saved into the index.html file. Finally, we may use the -h flag to see what other options we may use with cURL:
        </p>

        <h5>kappajester83@htb[/htb]$ curl -h</h5>

        <p>This is not the full help, this menu is stripped into categories.
        <ul>
          <li>
            <b>Use "--help category"</b> - to get an overview of all categories.
          </li>
          <li><b>Use the user manual </b>`- man curl` or the "--help all" flag for all options.</li>
        </ul>

        <p>
          As the above message mentions, we may use --help all to print a more detailed help menu, or --help category (e.g. -h http) to print the detailed help of a specific flag. If we ever need to read more detailed documentation, we can use man curl to view the full cURL manual page.
        </p>

        <p>
          In the upcoming sections, we will cover most of the above flags and see where we should use each of them.
        </p>

      </div>
      <hr>

      <div id="labs-table">

        <h4><a href="../webRequests.htm">Web Requests</a></h4>
        <ol>
          <li><a href="http.htm"><b><em>~ HyperText Transfer Protocol (HTTP)</em></b></a></li>
          <li><a href="https.htm">Hypertext Transfer Protocol Secure (HTTPS)</a></li>
        </ol>
      </div>
      <hr>

    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>