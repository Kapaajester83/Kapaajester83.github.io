<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Introduction to Bash Scripting</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>
    </div>

    <div id="writeup">
      <h3>
        <a href="../../contents.html">Hack The Box</a>
      </h3>
      <hr>

      <div id="labs-table-top">

        <h4><a href="../introductionBashScripting.htm">Introduction to Bash Scripting</a></h4>
        <ul>
          <li><a href="argumentsVariablesArrays.htm">Arguments, Variables, and Arrays</a></li>
          <li><a href="comparisonOperators.htm"><b><em>~ Comparison Operators</em></b></a></li>
          <li><a href="arithmetic.htm">Arithmetic</a></li>
        </ul>
      </div>
      <hr>

      <div>

        <h3><em>Comparison Operators</em></h3>

        <p>To compare specific values with each other, we need elements that are called comparison operators. The comparison operators are used to determine how the defined values will be compared. For these operators, we differentiate between:
        <ul>
          <li>string operators</li>
          <li>integer operators</li>
          <li>file operators</li>
          <li>boolean operators</li>
        </ul>

        <h4>String Operators</h4>

        <p>If we compare strings, then we know what we would like to have in the corresponding value.
        <ul>
          <li><b>==</b> - is equal to</li>
          <li><b>!=</b> - is not equal to</li>
          <li><b>
              <</b> - is less than in ASCII alphabetical order</li>
          <li><b>></b> - is greater than in ASCII alphabetical order</li>
          <li><b>-z</b> - if the string is empty (null)</li>
          <li><b>-n</b> - if the string is not null</li>
        </ul>

        <p>It is important to note here that we put the variable for the given argument ($1) in double-quotes ("$1"). This tells Bash that the content of the variable should be handled as a string. Otherwise, we would get an error.</p>

        <pre>
          #!/bin/bash

          # Check the given argument
          if [ "$1" != "HackTheBox" ]
          then
            echo -e "You need to give 'HackTheBox' as argument."
            exit 1

          elif [ $# -gt 1 ]
          then
            echo -e "Too many arguments given."
            exit 1

          else
            domain=$1
            echo -e "Success!"
          fi
        </pre>

        <p>String comparison operators "
          < />" works only within the double square brackets [[ "condition" ]]. We can find the ASCII table on the Internet or by using the following command in the terminal. We take a look at an example later.
        </p>

        <pre>
          kalijester68@htb[/htb]$ man ascii

          ASCII Table
          Decimal   Hexadecial  Character   Description
          0     00    NUL   End of a string
          ...   ...   ...   ...
          65    41    A     Capital A
          66    42    B     Capital B
          67    43    C     Capital C
          68    44    D     Capital D
          ...   ...   ...   ...
          127   7F    DEL   Delete
        </pre>

        <p>ASCII stands for American Standard Code for Information Interchange and represents a 7-bit character encoding. Since each bit can take two values, there are 128 different bit patterns, which can also be interpreted as the decimal integers 0 - 127 or in hexadecimal values 00 - 7F. The first 32 ASCII character codes are reserved as so-called control characters.</p>

        <h4>Integer Operators</h4>

        <p>Comparing integer numbers can be very useful for us if we know what values we want to compare. Accordingly, we define the next steps and commands how the script should handle the corresponding value.
        <ul>
          <li><b>-eq</b> - is equal to</li>
          <li><b>-ne</b> - is not equal to</li>
          <li><b>-lt</b> - is less than</li>
          <li><b>-le</b> - is less than or equal to</li>
          <li><b>-gt</b> - is greater than</li>
          <li><b>-ge</b> - is greater than or equal to</li>
        </ul>

        <pre>
          #!/bin/bash

          # Check the given argument
          if [ $# -lt 1 ]
          then
            echo -e "Number of given arguments is less than 1"
            exit 1

          elif [ $# -gt 1 ]
          then
            echo -e "Number of given arguments is greater than 1"
            exit 1

          else
            domain=$1
            echo -e "Number of given arguments equals 1"
          fi
        </pre>

        <h4>File Operators</h4>

        <p>The file operators are useful if we want to find out specific permissions or if they exist.
        <ul>
          <li><b>-e</b> - if the file exist</li>
          <li><b>-f</b> - tests if it is a file</li>
          <li><b>-d</b> - tests if it is a directory</li>
          <li><b>-L</b> - tests if it is if a symbolic link</li>
          <li><b>-N</b> - checks if the file was modified after it was last read</li>
          <li><b>-O</b> - if the current user owns the file</li>
          <li><b>-G</b> - if the file’s group id matches the current user’s</li>
          <li><b>-s</b> - tests if the file has a size greater than 0</li>
          <li><b>-r</b> - tests if the file has read permission</li>
          <li><b>-w</b> - tests if the file has write permission</li>
          <li><b>-x</b> - tests if the file has execute permission</li>
        </ul>

        <pre>
          #!/bin/bash

          # Check if the specified file exists
          if [ -e "$1" ]
          then
            echo -e "The file exists."
            exit 0

          else
            echo -e "The file does not exist."
            exit 2
          fi
        </pre>

        <h4>Boolean and Logical Operators</h4>

        <p>We get a boolean value "false" or "true" as a result with logical operators. Bash gives us the possibility to compare strings by using double square brackets [[ "condition" ]]. To get these boolean values, we can use the string operators. Whether the comparison matches or not, we get the boolean value "false" or "true".</p>

        <pre>
          #!/bin/bash

          # Check the boolean value
          if [[ -z $1 ]]
          then
            echo -e "Boolean value: True (is null)"
            exit 1

          elif [[ $# > 1 ]]
          then
            echo -e "Boolean value: True (is greater than)"
            exit 1

          else
            domain=$1
            echo -e "Boolean value: False (is equal to)"
          fi
        </pre>

        <h4>Logical Operators</h4>

        <p>With logical operators, we can define several conditions within one. This means that all the conditions we define must match before the corresponding code can be executed.
        <ul>
          <li><b>!</b> - logical negotation NOT</li>
          <li><b>&&</b> - logical AND</li>
          <li><b>||</b> - logical OR</li>
        </ul>

        <pre>
          #!/bin/bash

          # Check if the specified file exists and if we have read permissions
          if [[ -e "$1" && -r "$1" ]]
          then
            echo -e "We can read the file that has been specified."
            exit 0

          elif [[ ! -e "$1" ]]
          then
            echo -e "The specified file does not exist."
            exit 2

          elif [[ -e "$1" && ! -r "$1" ]]
          then
            echo -e "We don't have read permission for this file."
            exit 1

          else
            echo -e "Error occured."
            exit 5
          fi
        </pre>

        <h4>Exercise Script</h4>

        <pre>
          #!/bin/bash

          var="8dm7KsjU28B7v621Jls"
          value="ERmFRMVZ0U2paTlJYTkxDZz09Cg"

          for i in {1..40}
          do
                  var=$(echo $var | base64)
              
              #<---- If condition here:
          done
        </pre>

        <h4>Questions</h4>

        <p>Create an "If-Else" condition in the "For"-Loop that checks if the variable named "var" contains the contents of the variable named "value". Additionally, the variable "var" must contain more than 113,450 characters. If these conditions are met, the script must then print the last 20 characters of the variable "var". Submit these last 20 characters as the answer.</p>

      </div>
      <hr>

      <div id="labs-table">

        <h4><a href="../introductionBashScripting.htm">Introduction to Bash Scripting</a></h4>
        <ol>
          <li><a href="bourneAgainShell.htm">Bourne Again Shell</a></li>
          <li><a href="conditionalExecution.htm">Conditional Execution</a></li>
          <li><a href="argumentsVariablesArrays.htm">Arguments, Variables, and Arrays</a></li>
          <li><a href="comparisonOperators.htm"><b><em>~ Comparison Operators</em></b></a></li>
          <li><a href="arithmetic.htm">Arithmetic</a></li>
        </ol>
      </div>
      <hr>

    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>