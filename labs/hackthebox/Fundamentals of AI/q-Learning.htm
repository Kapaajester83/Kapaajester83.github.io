<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Fundamentals of AI</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>
    </div>

    <div id="writeup">
      <h3>
        <a href="../../contents.html">Hack The Box</a>
      </h3>
      <hr>

      <div id="labs-table-top">

        <h4><a href="../fundamentalsAI.htm">Fundamentals of AI</a></h4>
        <ul>
          <li><a href="reinforcementLearningAlgorithms.htm">Reinforcement Learning Algorithms</a></li>
          <li><a href="q-Learning.htm"><b><em>~ Q-Learning</em></b></a></li>
          <li><a href="sARSA.htm">SARSA (State-Action-Reward-State-Action)</a></li>
        </ul>
      </div>
      <hr>

      <div>

        <h3><em>Q-Learning</em></h3>

        <p>Q-learning is a model-free reinforcement learning algorithm that learns an optimal policy by estimating the Q-value. The Q-value represents the expected cumulative reward an agent can obtain by taking a specific action in a given state and following the optimal policy afterward. It's called "model-free" because the agent doesn't need a prior model of the environment to learn; it learns directly through trial and error, interacting with the environment and observing the outcomes.</p>

        <p>Imagine a self-driving car learning to navigate a city. It starts without knowing the roads, traffic lights, or pedestrian crossings. Through Q-learning, the car explores the city, taking actions (accelerating, braking, turning) and receiving rewards (for reaching destinations quickly and safely) or penalties (for collisions or traffic violations). Over time, the car learns which actions lead to higher rewards in different situations, eventually mastering the art of driving in that city.</p>

        <h4>The Q-Table</h4>

        <p>At the heart of Q-learning lies the Q-table. This table is a core algorithm component, storing the Q-values for all possible state-action pairs. Think of it as a lookup table that guides the agent's decision-making process. The rows of the table represent the states (e.g., different locations in the city for the self-driving car), and the columns represent the actions (e.g., accelerate, brake, turn left, turn right). Each cell in the table holds the Q-value for taking a particular action in a particular state.</p>

        <p>Below is an illustration of a simple Q-table for a grid world environment where a robot can move up, down, left, or right. The grid cells represent the states, and the actions are the possible movements.</p>

        <pre>
          State/Action  Up      Down    Left    Right
          ------------  ----    ----    ----    -----
          S1            -1.0    0.0     -0.5    0.2
          S2            0.0     1.0     0.0     -0.3
          S3            0.5     -0.5    1.0     0.0
          S4            -0.2    0.0     -0.3    1.0
        </pre>

        <p>In this table, S1, S2, S3, and S4 are different states in the grid world. The values in the cells represent the Q-values for taking each action from each state.</p>

        <p>The Q-value for a particular state-action pair is updated using the Q-learning update rule, which is based on the Bellman equation:</p>

        <pre>
          Q(s, a) = Q(s, a) + α * [r + γ * max(Q(s', a')) - Q(s, a)]

          Where:
            Q(s, a) is the current Q-value for taking action a in state s.
            α (alpha) is the learning rate, which determines the weight given to new information.
            r is the reward received after taking action a from state s.
            γ (gamma) is the discount factor, which determines the importance of future rewards.
            max(Q(s', a')) is the maximum Q-value of the next state s' and any action a'.
        </pre>

        <p>Let's use an example of updating a Q-value for the robot in the grid world environment.
        <ul>
          <li>The robot is currently in state S1.</li>
          <li>It takes action Right, moving to state S2.</li>
          <li>It receives a reward r = 0.5 for reaching state S2.</li>
          <li>The learning rate α = 0.1.</li>
          <li>The discount factor γ = 0.9.</li>
          <li>The maximum Q-value of the next state S2 is max(Q(S2, Up), Q(S2, Down), Q(S2, Left), Q(S2, Right)) = max(0.0, 1.0, 0.0, -0.3) = 1.0.</li>
        </ul>

        <p>Using the Q-learning update rule:</p>

        <pre>
          Q(S1, Right) = Q(S1, Right) + α * [r + γ * max(Q(S2, a')) - Q(S1, Right)]
          Q(S1, Right) = 0.2 + 0.1 * [0.5 + 0.9 * 1.0 - 0.2]
          Q(S1, Right) = 0.2 + 0.1 * [0.5 + 0.9 - 0.2]
          Q(S1, Right) = 0.2 + 0.1 * 1.2
          Q(S1, Right) = 0.2 + 0.12
          Q(S1, Right) = 0.32
        </pre>

        <p>After updating, the new Q-value for taking action Right from state S1 is 0.32. This updated value reflects the robot's learning from the experience of moving to state S2 and receiving a reward.</p>

        <h4>The Q-Learning Algorithm</h4>

        <p>The Q-learning algorithm is an iterative process of action selection, observation, and Q-value updates. The agent continuously interacts with the environment, learning from its experiences and refining its policy to maximize cumulative rewards.
        <ul>
          <li><a href="https://academy.hackthebox.com/storage/modules/290/qlearning.png">https://academy.hackthebox.com/storage/modules/290/qlearning.png</a></li>
        </ul>

        <p>Here's a breakdown of the steps involved:
        <ul>
          <li><b>Initialization:</b> - The Q-table is initialized, typically with arbitrary values (e.g., all zeros) or with some prior knowledge if available. This table will be updated as the agent learns.</li>
          <li><b>Choose an Action:</b> - In the current state, the agent selects an action to execute. This selection involves balancing exploration (trying new actions to discover potentially better strategies) and exploitation (using the current best-known action to maximize reward). This balance ensures that the agent explores the environment sufficiently while capitalizing on existing knowledge.</li>
          <li><b>Take Action and Observe:</b> - The agent performs the chosen action in the environment and observes the consequences. This includes the new state it transitions to after taking the action and the immediate reward received from the environment. These observations provide valuable feedback to the agent about the effectiveness of its actions.</li>
          <li><b>Update Q-value:</b> - The Q-value for the state-action pair is updated using the Q-learning update rule, which incorporates the received and estimated future rewards from the new state.</li>
          <li><b>Update State:</b> - The agent updates its current state to the new state it transitioned to after taking the action. This sets the stage for the next iteration of the algorithm.</li>
          <li><b>Iteration:</b> - Steps 2-5 are repeated until the Q-values converge to their optimal values, indicating that the agent has learned an effective policy, or a predefined stopping condition is met (e.g., a maximum number of iterations or a time limit).</li>
        </ul>

        <p>This iterative process allows the agent to continuously learn and refine its policy, improving its decision-making abilities and maximizing its cumulative rewards over time.</p>

        <p>Ultimately, the agent successfully navigates from the start to the goal by following the path that maximizes the cumulative reward.</p>

        <h4>Exploration-Exploitation Strategy</h4>

        <p>In Q-learning, the agent faces a fundamental dilemma: Should it explore new actions to discover better strategies potentially, or should it exploit its current knowledge and choose actions that have yielded high rewards in the past? This is the exploration-exploitation trade-off, a crucial aspect of reinforcement learning.
        <ul>
          <li><a href="https://academy.hackthebox.com/storage/modules/290/02%20-%20Q-Learning_0.png">https://academy.hackthebox.com/storage/modules/290/02%20-%20Q-Learning_0.png</a></li>
        </ul>

        <p>Think of it like choosing a restaurant for dinner. You could exploit your existing knowledge and go to your favorite restaurant, where you know you'll enjoy the food. Or, you could explore a new restaurant, taking a chance to discover a hidden gem you might like even more.</p>

        <p>Q-learning employs various strategies to balance exploration and exploitation. The goal is to find a balance that allows the agent to learn effectively while maximizing its rewards.
        <ul>
          <li><b>Exploration:</b> - Encourages the agent to try different actions, even if they haven't previously led to high rewards. This helps the agent discover new and potentially better strategies.</li>
          <li><b>Exploitation:</b> - This strategy focuses on selecting actions that have previously resulted in high rewards. It allows the agent to capitalize on existing knowledge and maximize short-term gains.</li>
        </ul>

        <h4>Epsilon-Greedy Strategy</h4>

        <p>The epsilon-greedy strategy offers a simple yet effective approach to balancing exploration and exploitation in Q-learning. It introduces randomness into the agent's action selection, preventing it from always defaulting to the same actions and potentially missing out on more rewarding options.</p>

        <p>The epsilon-greedy strategy encourages you to explore new options while still allowing you to enjoy your known favorites. With probability epsilon (ε), you venture out and try a random coffee shop, potentially discovering a hidden gem. With probability 1-epsilon, you stick to your usual spot, ensuring a satisfying coffee experience.</p>

        <p>The value of epsilon is a key parameter that can be adjusted over time to fine-tune the balance between exploration and exploitation.
        <ul>
          <li><b>High Epsilon (e.g., 0.9):</b> - A high epsilon value initially promotes more exploration. This is like being new in town and eager to try different coffee shops to find the best one.</li>
          <li><b>Low Epsilon (e.g., 0.1):</b> - As you gain more experience and develop preferences, you might decrease epsilon. This is like becoming a regular at your favorite coffee shop while occasionally trying new places.</li>
        </ul>

        <h4>Data Assumptions</h4>

        <p>Q-learning makes minimal assumptions about the data:
        <ul>
          <li><b>Markov Property:</b> - It assumes that the environment satisfies the Markov property, meaning that the next state depends only on the current state and action, not on the history of previous states and actions.</li>
          <li><b>Stationary Environment:</b> - It assumes that the environment's dynamics (transition probabilities and reward functions) do not change over time.</li>
        </ul>

        <p>Q-learning is a powerful and versatile algorithm for learning optimal policies in reinforcement learning problems. Its ability to learn without a model of the environment makes it suitable for a wide range of applications where the environment's dynamics are unknown or complex.</p>

      </div>
      <hr>

      <div id="labs-table">

        <h4><a href="../fundamentalsAI.htm">Fundamentals of AI</a></h4>
        <ol>
          <li><a href="introductionMachineLearning.htm">Introduction to Machine Learning</a></li>
          <li><a href="mathematicsRefresherAI.htm">Mathematics Refresher for AI</a></li>
          <li><a href="supervisedLearningAlgorithms.htm">Supervised Learning Algorithms</a></li>
          <li><a href="linearRegression.htm">Linear Regression</a></li>
          <li><a href="logisticRegression.htm">Logistic Regression</a></li>
          <li><a href="decisionTrees.htm">Decision Trees</a></li>
          <li><a href="naiveBayes.htm">Naive Bayes</a></li>
          <li><a href="supportVectorMachines.htm">Support Vector Machines (SVMs)</a></li>
          <li><a href="unsupervisedLearningAlgorithms.htm">Unsupervised Learning Algorithms</a></li>
          <li><a href="k-MeansClustering.htm">K-Means Clustering</a></li>
          <li><a href="principalComponentAnalysis.htm">Principal Component Analysis (PCA)</a></li>
          <li><a href="anomalyDetection.htm">Anomaly Detection</a></li>
          <li><a href="reinforcementLearningAlgorithms.htm">Reinforcement Learning Algorithms</a></li>
          <li><a href="q-Learning.htm"><b><em>~ Q-Learning</em></b></a></li>
          <li><a href="sARSA.htm">SARSA (State-Action-Reward-State-Action)</a></li>
        </ol>
      </div>
      <hr>

    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>