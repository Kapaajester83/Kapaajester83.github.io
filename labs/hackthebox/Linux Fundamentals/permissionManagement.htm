<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Linux Fundamentals</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--   _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ul>
            <li><a href="regularExpressions.htm">Regular Expressions</a></li>
            <li><a href="permissionManagement.htm"><b><em>~ Permission Management</em></b></a></li>
            <li><a href="userManagement.htm">User Management</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Permission Management</em></h3>

          <p>Under Linux, permissions are assigned to users and groups. Each user can be a member of different groups, and membership in these groups gives the user specific, additional permissions. Each file and directory belongs to a specific user and a specific group. So the permissions for users and groups that defined a file are also defined for the respective owners. When we create new files or directories, they belong to the group we belong to and us.</p>

          <p>When a user wants to access the contents of a Linux directory, they must first traverse the directory, which means navigating to that directory, requiring the user to have execute permissions on the directory. Without this permission, the user cannot access the directory's contents and will instead be presented with a “Permission Denied" error message.</p>

          <h4>Permission Management</h4>

          <h5>
            cry0l1t3@htb[/htb]$ ls -l<br>
            drw-rw-r-- 3 cry0l1t3 cry0l1t3 4096 Jan 12 12:30 scripts<br>
            <br>
            cry0l1t3@htb[/htb]$ ls -al mydirectory/<br>
            <br>
            ls: cannot access 'mydirectory/script.sh': Permission denied<br>
            ls: cannot access 'mydirectory/..': Permission denied<br>
            ls: cannot access 'mydirectory/subdirectory': Permission denied<br>
            ls: cannot access 'mydirectory/.': Permission denied<br>
            total 0<br>
            d????????? ? ? ? ? ? .<br>
            d????????? ? ? ? ? ? ..<br>
            -????????? ? ? ? ? ? script.sh<br>
            d????????? ? ? ? ? ? subdirectory
          </h5>

          <p>It is important to note that execute permissions are necessary to traverse a directory, no matter the user's level of access. Also, execute permissions on a directory do not allow a user to execute or modify any files or contents within the directory, only to traverse and access the content of the directory.</p>

          <p>To execute files within the directory, a user needs execute permissions on the corresponding file. To modify the contents of a directory (create, delete, or rename files and subdirectories), the user needs write permissions on the directory.</p>

          <p>The whole permission system on Linux systems is based on the octal number system, and basically, there are three different types of permissions a file or directory can be assigned:
          <ul>
            <li>(r) - Read</li>
            <li>(w) - Write</li>
            <li>(x) - Execute</li>
          </ul>

          <p>The permissions can be set for the owner, group, and others like presented in the next example with their corresponding permissions.</p>

          <h5>
            cry0l1t3@htb[/htb]$ ls -l /etc/passwd<br>
            - rwx rw- r-- 1 root root 1641 May 4 23:42 /etc/passwd
          </h5>

          <h4>Change Permissions</h4>

          <p>We can modify permissions using the chmod command, permission group references (u - owner, g - Group, o - others, a - All users), and either a [+] or a [-] to add remove the designated permissions. In the following example, a user creates a new shell script owned by that user, not executable, and set with read/write permissions for all users.</p>

          <h5>
            cry0l1t3@htb[/htb]$ ls -l shell<br>
            -rwxr-x--x 1 cry0l1t3 htbteam 0 May 4 22:12 shell
          </h5>

          <p>We can then apply read permissions for all users and see the result.</p>

          <h5>
            cry0l1t3@htb[/htb]$ chmod a+r shell && ls -l shell<br>
            -rwxr-xr-x 1 cry0l1t3 htbteam 0 May 4 22:12 shell
          </h5>

          <p>We can also set the permissions for all other users to read only using the octal value assignment.</p>

          <h5>
            cry0l1t3@htb[/htb]$ chmod 754 shell && ls -l shell<br>
            -rwxr-xr-- 1 cry0l1t3 htbteam 0 May 4 22:12 shell
          </h5>

          <p>If we sum the set bits from the Binary Representation assigned to the values from Binary Notation together, we get the Octal Value. The Permission Representation represents the bits set in the Binary Representation by using the three characters, which only recognizes the set permissions easier.</p>

          <h4>Chown - Change Owner</h4>

          <p>To change the owner and/or the group assignments of a file or directory, we can use the chown command. The syntax is like following:</p>

          <h5>
            cry0l1t3@htb[/htb]$ chown "user" : "group" "file/directory"
          </h5>

          <p>In this example, "shell" can be replaced with any arbitrary file or folder.

          <h5>
            cry0l1t3@htb[/htb]$ chown root:root shell && ls -l shell<br>
            -rwxr-xr-- 1 root root 0 May 4 22:12 shell
          </h5>

          <h4>SUID & SGID</h4>

          <p>Besides assigning direct user and group permissions, we can also configure special permissions for files by setting the Set User ID (SUID) and Set Group ID (SGID) bits. These SUID/SGID bits allow, for example, users to run programs with the rights of another user. Administrators often use this to give their users special rights for certain applications or files. The letter "s" is used instead of an "x". When executing such a program, the SUID/SGID of the file owner is used.</p>

          <p>It is often the case that administrators are not familiar with the applications but still assign the SUID/SGID bits, which leads to a high-security risk. Such programs may contain functions that allow the execution of a shell from the pager, such as the application "journalctl."</p>

          <p>If the administrator sets the SUID bit to "journalctl," any user with access to this application could execute a shell as root. More information about this and other such applications can be found at GTFObins.</p>

          <h4>Sticky Bit</h4>

          <p>Sticky bits are a type of file permission in Linux that can be set on directories. This type of permission provides an extra layer of security when controlling the deletion and renaming of files within a directory. It is typically used on directories that are shared by multiple users to prevent one user from accidentally deleting or renaming files that are important to others.</p>

          <p>For example, in a shared home directory, where multiple users have access to the same directory, a system administrator can set the sticky bit on the directory to ensure that only the owner of the file, the owner of the directory, or the root user can delete or rename files within the directory. This means that other users cannot delete or rename files within the directory as they do not have the required permissions. This provides an added layer of security to protect important files, as only those with the necessary access can delete or rename files. Setting the sticky bit on a directory ensures that only the owner, the directory owner, or the root user can change the files within the directory.</p>

          <p>When a sticky bit is set on a directory, it is represented by the letter “t" in the execute permission of the directory's permissions. For example, if a directory has permissions “rwxrwxrwt", it means that the sticky bit is set, giving the extra level of security so that no one other than the owner or root user can delete or rename the files or folders in the directory.</p>

          <h5>
            cry0l1t3@htb[/htb]$ ls -l<br>
            drw-rw-r-t 3 cry0l1t3 cry0l1t3 4096 Jan 12 12:30 scripts<br>
            drw-rw-r-T 3 cry0l1t3 cry0l1t3 4096 Jan 12 12:32 reports
          </h5>

          <p>In this example, we see that both directories have the sticky bit set. However, the reports folder has an uppercase T, and the scripts folder has a lowercase t.</p>

          <p>If the sticky bit is capitalized (T), then this means that all other users do not have execute (x) permissions and, therefore, cannot see the contents of the folder nor run any programs from it. The lowercase sticky bit (t) is the sticky bit where the execute (x) permissions have been set.</p>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ol>
            <li><a href="linuxStructure.htm">Linux Structure</a></li>
            <li><a href="linuxDistributions.htm">Linux Distributions</a></li>
            <li><a href="shell.htm">Introduction to Shell</a></li>
            <li><a href="promptDescription.htm">Prompt Description</a></li>
            <li><a href="gettingHelp.htm">Getting Help</a></li>
            <li><a href="systemInformation.htm">System Information</a></li>
            <li><a href="navigation.htm">Navigation</a></li>
            <li><a href="filesDirectories.htm">Working with Files and Directories</a></li>
            <li><a href="editingFiles.htm">Editing Files</a></li>
            <li><a href="findFilesDirectories.htm">Find Files and Directories</a></li>
            <li><a href="redirection.htm">File Description and Redirection</a></li>
            <li><a href="filterContents.htm">Filter Contents</a></li>
            <li><a href="regularExpressions.htm">Regular Expressions</a></li>
            <li><a href="permissionManagement.htm"><b><em>~ Permission Management</em></b></a></li>
            <li><a href="userManagement.htm">User Management</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>