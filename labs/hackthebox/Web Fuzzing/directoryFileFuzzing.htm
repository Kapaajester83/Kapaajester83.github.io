<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Web Fuzzing</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../webFuzzing.htm">Web Fuzzing</a></h4>
          <ul>
            <li><a href="tooling.htm">Tooling</a></li>
            <li><a href="directoryFileFuzzing.htm"><b><em>~ Directory and File Fuzzing</em></b></a></li>
            <li><a href="recursiveFuzzing.htm">Recursive Fuzzing</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Directory and File Fuzzing</em></h3>

          <p>Web applications often have directories and files that are not directly linked or visible to users. These hidden resources may contain sensitive information, backup files, configuration files, or even old, vulnerable application versions. Directory and file fuzzing aims to uncover these hidden assets, providing attackers with potential entry points or valuable information for further exploitation.</p>

          <h4>Uncovering Hidden Assets</h4>

          <p>Web applications often house a treasure trove of hidden resources — directories, files, and endpoints that aren't readily accessible through the main interface. These concealed areas might hold valuable information for attackers, including:
          <ul>
            <li><b>Sensitive data:</b> Backup files, configuration settings, or logs containing user credentials or other confidential information.</li>
            <li><b>Outdated content:</b> Older versions of files or scripts that may be vulnerable to known exploits.</li>
            <li><b>Development resources:</b> Test environments, staging sites, or administrative panels that could be leveraged for further attacks.</li>
            <li><b>Hidden functionalities:</b> Undocumented features or endpoints that could expose unexpected vulnerabilities.</li>
          </ul>

          <p>Discovering these hidden assets is crucial for security researchers and penetration testers. It provides a deeper understanding of a web application's attack surface and potential vulnerabilities.</p>

          <h4>The Importance of Finding Hidden Assets</h4>

          <p>Uncovering these hidden gems is far from trivial. Each discovery contributes to a complete picture of the web application's structure and functionality, essential for a thorough security assessment. These hidden areas often lack the robust security measures found in public-facing components, making them prime targets for exploitation. By proactively identifying these vulnerabilities, you can stay one step ahead of malicious actors.</p>

          <p>Even if a hidden asset doesn't immediately reveal a vulnerability, the information gleaned can prove invaluable in the later stages of a penetration test. This could include anything from understanding the underlying technology stack to discovering sensitive data that can be used for further attacks.</p>

          <p>Directory and file fuzzing are among the most effective methods for uncovering these hidden assets. This involves systematically probing the web application with a list of potential directory and file names and analyzing the server's responses to identify valid resources.</p>

          <h4>Wordlists</h4>

          <p>Wordlists are the lifeblood of directory and file fuzzing. They provide the potential directory and file names your chosen tool will use to probe the web application. Effective wordlists can significantly increase your chances of discovering hidden assets.</p>

          <p>Wordlists are typically compiled from various sources. This often includes scraping the web for common directory and file names, analyzing publicly available data breaches, and extracting directory information from known vulnerabilities. These wordlists are then meticulously curated, removing duplicates and irrelevant entries to ensure optimal efficiency and effectiveness during fuzzing operations. The goal is to create a comprehensive list of potential directories and file names that will likely be found on web servers, allowing you to thoroughly probe a target application for hidden assets.</p>

          <p>The tools we've discussed – ffuf, wfuzz, etc – don't have built-in wordlists, but they are designed to work seamlessly with external wordlist files. This flexibility allows you to use pre-existing wordlists or create your own to tailor your fuzzing efforts to specific targets and scenarios.</p>

          <p>One of the most comprehensive and widely-used collections of wordlists is SecLists. This open-source project on GitHub (https://github.com/danielmiessler/SecLists) provides a vast repository of wordlists for various security testing purposes, including directory and file fuzzing.</p>

          <p>On pwnbox specifically, the seclists folder is located in /usr/share/seclists/, all lowercase, but other distributions might name it as per the repository, SecLists, so if a command doesn't work, double check the wordlist path.</p>

          <p>SecLists contains wordlists for:
          <ul>
            <li>Common directory and file names</li>
            <li>Backup files</li>
            <li>Configuration files</li>
            <li>Vulnerable scripts</li>
            <li>And much more</li>
          </ul>

          <p>The most commonly used wordlists for fuzzing web directories and files from SecLists are:
          <ul>
            <li><b>Discovery/Web-Content/common.txt:</b> This general-purpose wordlist contains a broad range of common directory and file names on web servers. It's an excellent starting point for fuzzing and often yields valuable results.</li>
            <li><b>Discovery/Web-Content/directory-list-2.3-medium.txt:</b> This is a more extensive wordlist specifically focused on directory names. It's a good choice when you need a deeper dive into potential directories.</li>
            <li><b>Discovery/Web-Content/raft-large-directories.txt:</b> This wordlist boasts a massive collection of directory names compiled from various sources. It's a valuable resource for thorough fuzzing campaigns.</li>
            <li><b>Discovery/Web-Content/big.txt:</b> As the name suggests, this is a massive wordlist containing both directory and file names. It's useful when you want to cast a wide net and explore all possibilities.</li>
          </ul>

          <h4>Actually Fuzzing</h4>

          <p>Now that you understand the concept of wordlists, let's dive into the fuzzing process. We'll use ffuf, a powerful and flexible fuzzing tool, to uncover hidden directories and files on our target web application.</p>

          <p>To follow along, start the target system via the question section at the bottom of the page, replacing the uses of IP:PORT with the IP:PORT for your spawned instance.</p>

          <h4>ffuf</h4>

          <p>We will use ffuf for this fuzzing task. Here's how ffuf generally works:
          <ul>
            <li><b>Wordlist:</b> You provide ffuf with a wordlist containing potential directory or file names.</li>
            <li><b>URL with FUZZ keyword:</b> You construct a URL with the FUZZ keyword as a placeholder where the wordlist entries will be inserted.</li>
            <li><b>Requests:</b> ffuf iterates through the wordlist, replacing the FUZZ keyword in the URL with each entry and sending HTTP requests to the target web server.</li>
            <li><b>Response Analysis:</b> ffuf analyzes the server's responses (status codes, content length, etc.) and filters the results based on your criteria.</li>
          </ul>

          <p>For example, if you want to fuzz for directories, you might use a URL like this:</p>

          <h5>
            Code: http<br>
            <br>
            http://localhost/FUZZ
          </h5>

          <p>ffuf will replace FUZZ with words like "admin," "backup," "uploads," etc., from your chosen wordlist and then send requests to http://localhost/admin, http://localhost/backup, and so on.</p>

          <h4>Directory Fuzzing</h4>

          <p>The first step is to perform directory fuzzing, which helps us discover hidden directories on the web server. Here's the ffuf command we'll use:</p>

          <h5>
            kappajester83@htb[/htb]$ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u http://IP:PORT/FUZZ<br>
            <br>
            v2.1.0-dev <br>
            ________________________________________________ <br>
            <br>
            :: Method : GET <br>
            :: URL : http://IP:PORT/FUZZ <br>
            :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt <br>
            :: Follow redirects : false <br>
            :: Calibration : false <br>
            :: Timeout : 10 <br>
            :: Threads : 40 <br>
            :: Matcher : Response status: 200-399 <br>
            ________________________________________________ <br>
            <br>
            [...] <br>
            <br>
            w2ksvrus [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 0ms] <br>
            :: Progress: [220559/220559] :: Job [1/1] :: 100000 req/sec :: Duration: [0:00:03] :: Errors: 0 ::
          </h5>

          <ul>
            <li><b>-w (wordlist):</b> Specifies the path to the wordlist we want to use. In this case, we're using a medium-sized directory list from SecLists.</li>
            <li><b>-u (URL):</b> Specifies the base URL to fuzz. The FUZZ keyword acts as a placeholder where the fuzzer will insert words from the wordlist.</li>
          </ul>

          <p>The output above shows that ffuf has discovered a directory called w2ksvrus on the target web server, as indicated by the 301 (Moved Permanently) status code. This could be a potential entry point for further investigation.</p>

          <h4>File Fuzzing</h4>

          <p>While directory fuzzing focuses on finding folders, file fuzzing dives deeper into discovering specific files within those directories or even in the root of the web application. Web applications use various file types to serve content and perform different functions. Some common file extensions include:
          <ul>
            <li><b>.php:</b> Files containing PHP code, a popular server-side scripting language.</li>
            <li><b>.html:</b> Files that define the structure and content of web pages.</li>
            <li><b>.txt:</b> Plain text files, often storing simple information or logs.</li>
            <li><b>.bak:</b> Backup files are created to preserve previous versions of files in case of errors or modifications.</li>
            <li><b>.js:</b> Files containing JavaScript code add interactivity and dynamic functionality to web pages.</li>
          </ul>

          <p>By fuzzing for these common extensions with a wordlist of common file names, we increase our chances of discovering files that might be unintentionally exposed or misconfigured, potentially leading to information disclosure or other vulnerabilities.</p>

          <p>For example, if the website uses PHP, discovering a backup file like config.php.bak could reveal sensitive information such as database credentials or API keys. Similarly, finding an old or unused script like test.php might expose vulnerabilities that attackers could exploit.</p>

          <p>Utilize ffuf and a wordlist of common file names to search for hidden files with specific extensions:</p>

          <h4>Directory and File Fuzzing</h4>

          <h5>
            kappajester83@htb[/htb]$ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://IP:PORT/w2ksvrus/FUZZ.html -e .php,.html,.txt,.bak,.js -v<br>
            <br>
            v2.1.0-dev<br>
            ________________________________________________<br>
            <br>
            :: Method : GET<br>
            :: URL : http://IP:PORT/w2ksvrus/FUZZ.html<br>
            :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/common.txt<br>
            :: Extensions : .php .html .txt .bak .js <br>
            :: Follow redirects : false<br>
            :: Calibration : false<br>
            :: Timeout : 10<br>
            :: Threads : 40<br>
            :: Matcher : Response status: 200-299,301,302,307,401,403,405,500<br>
            ________________________________________________<br>
            <br>
            [Status: 200, Size: 111, Words: 2, Lines: 2, Duration: 0ms]<br>
            | URL | http://IP:PORT/w2ksvrus/dblclk.html<br>
            * FUZZ: dblclk<br>
            <br>
            [Status: 200, Size: 112, Words: 6, Lines: 2, Duration: 0ms]<br>
            | URL | http://IP:PORT/w2ksvrus/index.html<br>
            * FUZZ: index<br>
            <br>
            :: Progress: [28362/28362] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 ::
          </h5>

          <p>The ffuf output shows that it discovered two files within the /w2ksvrus directory:
          <ul>
            <li><b>dblclk.html:</b> This file is 111 bytes in size and consists of 2 words and 2 lines. Its purpose might not be immediately apparent, but it's a potential point of interest for further investigation. Perhaps it contains hidden content or functionality.</li>

            <li><b>index.html:</b> This file is slightly larger at 112 bytes and contains 6 words and 2 lines. It's likely the default index page for the w2ksvrus directory.</li>
          </ul>

          <h4>Questions</h4>

          <ol>
            <li>Answer the question(s) below to complete this Section and earn cubes!</li>
            <li>Target(s): Click here to spawn the target system!</li>
            <li>+ 1 Within the "webfuzzing_hidden_path" path on the target system (ie http://IP:PORT/webfuzzing_hidden_path/), fuzz for folders and then files to find the flag.</li>
          </ol>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../webFuzzing.htm">Web Fuzzing</a></h4>
          <ol>
            <li><a href="introduction.htm">Introduction to Web Fuzzing</a></li>
            <li><a href="tooling.htm">Tooling</a></li>
            <li><a href="directoryFileFuzzing.htm"><b><em>~ Directory and File Fuzzing</em></b></a></li>
            <li><a href="recursiveFuzzing.htm">Recursive Fuzzing</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>