<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Python 3</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../python3.htm">Python 3</a></h4>
          <ul>
            <li><a href="firstIterations.htm">The First Iterations</a></li>
            <li><a href="continouslyImprovingCode.htm"><b><em>~ Continously Improving The Code</em></b></a></li>
            <li><a href="futherInprovments.htm">Further Inprovments</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Continuously Improving The Code</em></h3>

          <p>At this point, we have a working Python script that will extract words from a webpage and print the top-10 most occurring ones to the console.</p>

          <p>Let us suppose that our engagement required us to count words on two web pages. We would then need to repeat large amounts of the above code for the new webpage. Alternatively, we could refactor the current code and move the word counting part into its function.</p>

          <h4>Extracting The Counting Code to Its Function</h4>

          <pre>
            Code: python

            def count_occurrences_in(word_list):
                word_count = {}
                for word in word_list:
                    if word not in word_count:
                        word_count[word] = 1
                    else:
                        current_count = word_count.get(word)
                        word_count[word] = current_count + 1
                return word_count
          </pre>

          <p>Notice how we added an input parameter and replaced the list of words to iterate over to this new word_list parameter. We also added a return statement at the bottom so that our function can give back the result. We can do the same for the code that currently acts like glue in our script:</p>

          <h4>Current Glue</h4>

          <h5>
            Code: python<br>
            <br>
            html = get_html_of(PAGE_URL)<br>
            soup = BeautifulSoup(html, 'html.parser')<br>
            raw_text = soup.get_text()<br>
            all_words = re.findall(r'\w+', raw_text)
          </h5>

          <p>By simply replacing the PAGE_URL constant (by naming convention - it's not constant) with the url variable and returning the result of the regular expression findall call, we've turned the static glue into reuseable code:</p>

          <h4>Refactored to Its Function</h4>

          <pre>
            Code: python

            def get_all_words_from(url):
                html = get_html_of(url)
                soup = BeautifulSoup(html, 'html.parser')
                raw_text = soup.get_text()
                return re.findall(r'\w+', raw_text)

            all_words = get_all_words_from(PAGE_URL)
          </pre>

          <p>If we perform the same exercise for the remaining code, we get this:</p>

          <h4>Refactoring the Remaining Code</h4>

          <pre>
            Code: python

            import requests
            import re
            from bs4 import BeautifulSoup

            PAGE_URL = 'http://target:port'

            def get_html_of(url):
                resp = requests.get(url)

                if resp.status_code != 200:
                    print(f'HTTP status code of {resp.status_code} returned, but 200 was expected. Exiting...')
                    exit(1)

                return resp.content.decode()

            def count_occurrences_in(word_list):
                word_count = {}

                for word in word_list:
                    if word not in word_count:
                        word_count[word] = 1
                    else:
                        current_count = word_count.get(word)
                        word_count[word] = current_count + 1
                return word_count

            def get_all_words_from(url):
                html = get_html_of(url)
                soup = BeautifulSoup(html, 'html.parser')
                raw_text = soup.get_text()
                return re.findall(r'\w+', raw_text)

            def get_top_words_from(all_words):
                occurrences = count_occurrences_in(all_words)
                return sorted(occurrences.items(), key=lambda item: item[1], reverse=True)

            all_words = get_all_words_from(PAGE_URL)
            top_words = get_top_words_from(all_words)

            for i in range(10):
                print(top_words[i][0])

            Notice, in addition to the above, the following piece of refactored code.
            Glue, But Cleaner
            Code: python

            def get_top_words_from(url):
                all_words = get_all_words_from(url)
                occurrences = count_occurrences_in(all_words)
                return sorted(occurrences.items(), key=lambda item: item[1], reverse=True)
          </pre>

          <p>This function takes a URL as a parameter and then immediately uses the URL to call another function that gets the list of words needed. This additional refactoring made the code a fair bit cleaner and easier to read in this situation. If we were to crawl ten pages, we would need to refactor yet again, not to repeat ourselves over and over again. Alternatively, we could load a list of URLs from a text file, do the word collecting for each URL and aggregate the data in the end. However, instead of trying to solve a problem that does not exist, let us move on.</p>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../python3.htm">Python 3</a></h4>
          <ol>
            <li><a href="introduction.htm">Introduction to Python 3</a></li>
            <li><a href="executingPythonCode.htm">Executing Python Code</a></li>
            <li><a href="introductionVariables.htm">Introduction to Variables</a></li>
            <li><a href="conditionalStatementsLoops.htm">Conditional Statements and Loops</a></li>
            <li><a href="definingFunctions.htm">Defining Functions</a></li>
            <li><a href="makingCodeClassy.htm">Making Code Classy</a></li>
            <li><a href="introductionLibraries.htm">Introduction to Librairies</a></li>
            <li><a href="managingLibraries.htm">Managing Libraries in Python</a></li>
            <li><a href="importanceLibraries.htm">The Importance of Libraries</a></li>
            <li><a href="firstIterations.htm">The First Iterations</a></li>
            <li><a href="continouslyImprovingCode.htm"><b><em>~ Continously Improving The Code</em></b></a></li>
            <li><a href="futherInprovments.htm">Further Inprovments</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>