<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Introduction to Web Applications</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>
    </div>

    <div id="writeup">
      <h3>
        <a href="../../contents.html">Hack The Box</a>
      </h3>
      <hr>

      <div id="labs-table-top">

        <h4><a href="../introductionWebApplications.htm">Introduction to Web Applications</a></h4>
        <ul>
          <li><a href="htmlInjection.htm">HTML Injection</a></li>
          <li><a href="crossSiteScripting.htm"><b><em>~ Cross-Site Scripting (XSS)</em></b></a></li>
          <li><a href="crossSiteForgery.htm">Cross-Site Request Forgery (CSRF)</a></li>
        </ul>
      </div>
      <hr>

      <div>

        <h3><em>Cross-Site Scripting (XSS)</em></h3>

        <p>HTML Injection vulnerabilities can often be utilized to also perform Cross-Site Scripting (XSS) attacks by injecting JavaScript code to be executed on the client-side. Once we can execute code on the victim's machine, we can potentially gain access to the victim's account or even their machine. XSS is very similar to HTML Injection in practice. However, XSS involves the injection of JavaScript code to perform more advanced attacks on the client-side, instead of merely injecting HTML code. There are three main types of XSS:
        <ul>
          <li><b>Reflected XSS</b> - Occurs when user input is displayed on the page after processing (e.g., search result or error message).</li>
          <li><b>Stored XSS</b> - Occurs when user input is stored in the back end database and then displayed upon retrieval (e.g., posts or comments).</li>
          <li><b>DOM XSS</b> - Occurs when user input is directly shown in the browser and is written to an HTML DOM object (e.g., vulnerable username or page title).</li>
        </ul>

        <p>In the example we saw for HTML Injection, there was no input sanitization whatsoever. Therefore, it may be possible for the same page to be vulnerable to XSS attacks. We can try to inject the following DOM XSS JavaScript code as a payload, which should show us the cookie value for the current user:</p>

        <h5>#"img src=/ onerror=alert(document.cookie)"</h5>

        <p>Once we input our payload and hit ok, we see that an alert window pops up with the cookie value in it:
        <ul>
          <li><a href="https://academy.hackthebox.com/storage/modules/75/web_apps_xss_2.jpg">https://academy.hackthebox.com/storage/modules/75/web_apps_xss_2.jpg</a></li>
        </ul>

        <p>This payload is accessing the HTML document tree and retrieving the cookie object's value. When the browser processes our input, it will be considered a new DOM, and our JavaScript will be executed, displaying the cookie value back to us in a popup.</p>

        <p>An attacker can leverage this to steal cookie sessions and send them to themselves and attempt to use the cookie value to authenticate to the victim's account. The same attack can be used to perform various types of other attacks against a web application's users. XSS is a vast topic that will be covered in-depth in later modules.</p>

        <h4>Questions</h4>

        <p>Try to use XSS to get the cookie value in the above page</p>

      </div>
      <hr>

      <div id="labs-table">

        <h4><a href="../introductionWebApplications.htm">Introduction to Web Applications</a></h4>
        <ol>
          <li><a href="introduction.htm">Introduction</a></li>
          <li><a href="webApplicationLayout.htm">Web Application Layout</a></li>
          <li><a href="frontEndbackEnd.htm">Front End vs. Back End</a></li>
          <li><a href="webApplicationsHtml.htm">HTML</a></li>
          <li><a href="webApplicationsCss.htm">CSS</a></li>
          <li><a href="javascript.htm">JavaScript</a></li>
          <li><a href="sensitiveDataExposure.htm">Sensitive Data Exposure</a></li>
          <li><a href="htmlInjection.htm">HTML Injection</a></li>
          <li><a href="crossSiteScripting.htm"><b><em>~ Cross-Site Scripting (XSS)</em></b></a></li>
          <li><a href="crossSiteForgery.htm">Cross-Site Request Forgery (CSRF)</a></li>
        </ol>
      </div>
      <hr>

    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>