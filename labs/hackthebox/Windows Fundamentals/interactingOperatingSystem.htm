<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Windows Fundamentals</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--   _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../windowsFundamentals.htm">Windows Fundamentals</a></h4>
          <ul>
            <li><a href="windowsSessions.htm">Windows Sessions</a></li>
            <li><a href="interactingOperatingSystem.htm"><b><em>~ Interacting with the Windows Operating System</em></b></a></li>
            <li><a href="managementInstrumentation.htm">Windows Management Instrumentations (WMI)</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Interacting with the Windows Operating System</em></h3>

          <h4>Graphical User Interface</h4>

          <p>The concept of a graphical user interface (GUI) was introduced in the late 1970s by the Xerox Palo Alto research laboratory. It was added to Apple and Microsoft operating systems to address usability concerns for everyday users that would likely have difficulty navigating the command line. Most casual Windows computer users do not ever need to interact with the operating system via the command line. As the name alludes to, a GUI provides users with an interactive point and click interface for interacting with the operating system and installed applications and services.</p>

          <p>The introduction of the GUI opened up widespread appeal and access to computers across many demographics since users would be able to interact with their computer without having to memorize commands or know any programming language. Systems administrators commonly use GUI-based systems for administering Active Directory, configuring IIS, or interacting with databases.</p>

          <h4>Remote Desktop Protocol (RDP)</h4>

          <p>RDP is a proprietary Microsoft protocol which allows a user to connect to a remote system over a network connection and obtain a graphical user interface. The user connects using RDP client software to a target system running RDP server software. RDP uses port 3389 to open a dedicated network channel for sending data back and forth. When connecting via RDP, a user can access the GUI as if they were actually sitting at the computer and logging into it locally. RDP is often used by system administrators to administer remote systems quickly. It can also allow users to access their work computers when traveling or working from home after connecting to a Virtual Private Network (VPN).</p>

          <h4>Windows Command Line</h4>

          <p>Command-line interfaces give users greater control over their systems and can be used to perform a wide variety of day-to-day, administrative, and troubleshooting tasks. It can be leveraged to introduce automation to perform certain tasks quickly (such as adding many users to a domain at once). In Windows operating systems, the main two ways to interact with the system from the command line are via the Command Prompt (CMD) and PowerShell.</p>

          <p>The Windows Command Reference from Microsoft is a comprehensive A-Z command reference which includes an overview, usage examples, and command syntax for most Windows commands, and familiarity with it is recommended.</p>

          <h4>CMD</h4>

          <p>The Command Prompt (cmd.exe) is used to enter and execute commands. A user can enter one-off commands such as ipconfig to view IP address information or perform more advanced tasks such as setting up scheduled tasks or creating scripts and batch files. The Command prompt can be opened from the Start Menu, by typing cmd in the run dialogue box, or by directly launching the binary from C:\Windows\system32\cmd.exe.</p>

          <p>After launching cmd.exe we can type help to see a listing of available commands.</p>

          <h4>Interacting with the Windows Operating System</h4>

          <h5>C:\htb> help</h5>

          <p>For more information on a specific command, type HELP command-name
          <ul>
            <li><b>ASSOC</b> - Displays or modifies file extension associations.</li>
            <li><b>ATTRIB</b> - Displays or changes file attributes.</li>
            <li><b>BREAK</b> - Sets or clears extended CTRL+C checking.</li>
            <li><b>BCDEDIT</b> - Sets properties in boot database to control boot loading.</li>
            <li><b>CACLS</b> - Displays or modifies access control lists (ACLs) of files.</li>
            <li><b>CALL</b> - Calls one batch program from another.</li>
            <li><b>CD</b> - Displays the name of or changes the current directory.</li>
            <li><b>CHCP</b> - Displays or sets the active code page number.</li>
            <li><b>CHDIR</b> - Displays the name of or changes the current directory.</li>
            <li><b>CHKDSK</b> - Checks a disk and displays a status report.</li>
            <li><b>CHKNTFS</b> - Displays or modifies the checking of disk at boot time.</li>
            <li><b>CLS</b> - Clears the screen.</li>
            <li><b>CMD</b> - Starts a new instance of the Windows command interpreter.</li>
            <li><b>COLOR</b> - Sets the default console foreground and background colors.</li>
            <li><b>COMP</b> - Compares the contents of two files or sets of files.</li>
            <li><b>COMPACT</b> - Displays or alters the compression of files on NTFS partitions.</li>
            <li><b>CONVERT</b> - Converts FAT volumes to NTFS. You cannot convert the current drive.</li>
            <li><b>COPY</b> - Copies one or more files to another location.</li>
          </ul>

          <p>For more information about a specific command, we can type help "command name".</p>

          <h4>Interacting with the Windows Operating System</h4>

          <h5>C:\htb> help schtasks</h5>

          <h4>SCHTASKS /parameter [arguments]</h4>

          <p>Enables an administrator to create, delete, query, change, run and end scheduled tasks on a local or remote system.</p>

          <p>Parameter List:
          <ul>
            <li><b>/Create</b> - Creates a new scheduled task.</li>
            <li><b>/Delete</b> - Deletes the scheduled task(s).</li>
            <li><b>/Query</b> - Displays all scheduled tasks.</li>
            <li><b>/Change</b> - Changes the properties of scheduled task.</li>
            <li><b>/Run</b> - Runs the scheduled task on demand.</li>
            <li><b>/End</b> - Stops the currently running scheduled task.</li>
            <li><b>/ShowSid</b> - Shows the security identifier corresponding to a scheduled task name.</li>
            <li><b>/?</b> - Displays this help message.</li>
          </ul>

          <p>Examples:</p>

          <h5>
            SCHTASKS<br>
            SCHTASKS /?<br>
            SCHTASKS /Run /?<br>
            SCHTASKS /End /?<br>
            SCHTASKS /Create /?<br>
            SCHTASKS /Delete /?<br>
            SCHTASKS /Query /?<br>
            SCHTASKS /Change /?<br>
            SCHTASKS /ShowSid /?
          </h5>

          <p>Note that certain commands have their own help menus, which can be accessed by typing "command" /?. For example, information about the ipconfig command can be seen below.</p>

          <h4>Interacting with the Windows Operating System</h4>

          <h5>C:\htb> ipconfig /?</h5>

          <p>USAGE:</p>

          <h5>
            ipconfig [/allcompartments] [/? | /all |<br>
            ./renew [adapter] | /release [adapter] |<br>
            ./renew6 [adapter] | /release6 [adapter] |<br>
            ./flushdns | /displaydns | /registerdns |<br>
            ./showclassid adapter |<br>
            ./setclassid adapter [classid] |<br>
            ./showclassid6 adapter |<br>
            ./setclassid6 adapter [classid] ]
          </h5>

          <p>where - (wildcard characters * and ? allowed, see examples)</p>

          <p>Options:
          <ul>
            <li><b>/?</b> - Display this help message</li>
            <li><b>/all</b> - Display full configuration information.</li>
            <li><b>/release</b> - Release the IPv4 address for the specified adapter.</li>
            <li><b>/release6</b> - Release the IPv6 address for the specified adapter.</li>
            <li><b>/renew</b> - Renew the IPv4 address for the specified adapter.</li>
            <li><b>/renew6</b> - Renew the IPv6 address for the specified adapter.</li>
            <li><b>/flushdns</b> - Purges the DNS Resolver cache.</li>
            <li><b>/registerdns</b> - Refreshes all DHCP leases and re-registers DNS names</li>
            <li><b>/displaydns</b> - Display the contents of the DNS Resolver Cache.</li>
            <li><b>/showclassid</b> - Displays all the dhcp class IDs allowed for adapter.</li>
            <li><b>/setclassid</b> - Modifies the dhcp class id.</li>
            <li><b>/showclassid6</b> - Displays all the IPv6 DHCP class IDs allowed for adapter.</li>
            <li><b>/setclassid6</b> - Modifies the IPv6 DHCP class id.</li>
          </ul>

          <h4>PowerShell</h4>

          <p>Windows PowerShell is a command shell that was designed by Microsoft to be more geared towards system administrators. PowerShell, like the Windows command line, has an interactive command prompt as well as a powerful scripting environment. PowerShell is built on top of the .NET Framework, which is used for building and running applications on Windows. This makes it a very powerful tool for interfacing directly with the operating system.</p>

          <p>Like the command prompt, PowerShell gives us direct access to the file system, and we run the majority of the same commands that we can within a cmd shell.</p>

          <h4>Cmdlets</h4>

          <p>PowerShell utilizes cmdlets, which are small single-function tools built into the shell. There are more than 100 core cmdlets, and many additional ones have been written, or we can author our own to perform more complex tasks. PowerShell also supports both simple and complex scripts used for system administration tasks, automation, and more.</p>

          <p>Cmdlets are in the form of Verb-Noun. For example, the command Get-ChildItem can be used to list our current directory. Cmdlets also take arguments or flags. We can type Get-ChildItem - and hit the tab key to iterate through the arguments. A command such as Get-ChildItem -Recurse will show us the contents of our current working directory and all subdirectories. Another example would be Get-ChildItem -Path C:\Users\Administrator\Documents to get the contents of another directory. Finally, we can combine arguments such as this to list all subdirectories' contents within another directory recursively: Get-ChildItem -Path C:\Users\Administrator\Downloads -Recurse.</p>

          <h4>Aliases</h4>

          <p>Many cmdlets in PowerShell also have aliases. For example, the aliases for the cmdlet Set-Location, to change directories, is either cd or sl. Meanwhile, the aliases for Get-ChildItem are ls and gci. We can view all available aliases by typing Get-Alias.</p>

          <h5>
            PS C:\htb> get-alias<br>
            <br>
            Alias - % -> ForEach-Object<br>
            Alias - ? -> Where-Object<br>
            Alias - ac -> Add-Content<br>
            Alias - asnp -> Add-PSSnapin<br>
            Alias - cat -> Get-Content<br>
            Alias - cd -> Set-Location<br>
            Alias - CFS -> ConvertFrom-String<br>
            Alias - chdir -> Set-Location<br>
            Alias - clc -> Clear-Content<br>
            Alias - clear -> Clear-Host<br>
            Alias - clhy -> Clear-History<br>
            Alias - cli -> Clear-Item<br>
            Alias - clp -> Clear-ItemProperty
          </h5>

          <p>We can also set up our own aliases with New-Alias and get the alias for any cmdlet with Get-Alias -Name. Interacting with the Windows Operating System</p>

          <h5>
            PS C:\htb> New-Alias -Name "Show-Files" Get-ChildItem
            PS C:\> Get-Alias -Name "Show-Files"
          </h5>

          <p>PowerShell has a help system for cmdlets, functions, scripts, and concepts. This is not installed by default, but we can either run the Get-Help "cmdlet-name" -Online command to open the online help for a cmdlet or function in our web browser. We can type Update-Help to download and install help files locally.</p>

          <h5>PS C:\htb> help</h5>

          <p>TOPIC - Windows PowerShell Help System</p>

          <p>SHORT DESCRIPTION - Displays help about Windows PowerShell cmdlets and concepts.</p>

          <p>LONG DESCRIPTION
          <ul>
            <li>Windows PowerShell Help describes Windows PowerShell cmdlets,
              functions, scripts, and modules, and explains concepts, including
              the elements of the Windows PowerShell language.</li>

            <li>Windows PowerShell does not include help files, but you can read the
              help topics online, or use the Update-Help cmdlet to download help files
              to your computer and then use the Get-Help cmdlet to display the help
              topics at the command line.</li>

            <li>You can also use the Update-Help cmdlet to download updated help files
              as they are released so that your local help content is never obsolete.</li>

            <li>Without help files, Get-Help displays auto-generated help for cmdlets,
              functions, and scripts.</li>
          </ul>

          <p>ONLINE HELP -You can find help for Windows PowerShell online in the TechNet Library beginning at http://go.microsoft.com/fwlink/?LinkID=108518.</p>

          <p>To open online help for any cmdlet or function, type:</p>

          <h5>Get-Help "cmdlet-name" -Online</h5>

          <p>Typing a command such as Get-Help Get-AppPackage will return just the partial help unless the Help files are installed.</p>

          <h5>PS C:\htb> Get-Help Get-AppPackage</h5>

          <p>NAME - Get-AppxPackage</p>

          <p>SYNTAX - Get-AppxPackage [[-Name] "string"] [[-Publisher] "string"] [-AllUsers] [-PackageTypeFilter {None | Main | Framework | Resource | Bundle | Xap | Optional | All}] [-User "string"] [-Volume "AppxVolume"] ["CommonParameters"]</p>

          <p>ALIASES - Get-AppPackage</p>

          <p>REMARKS - Get-Help cannot find the Help files for this cmdlet on this computer. It is displaying only partial help.

          <h4>Running Scripts</h4>

          <p>The PowerShell ISE (Integrated Scripting Environment) allows users to write PowerShell scripts on the fly. It also has an autocomplete/lookup function for PowerShell commands. The PowerShell ISE allows us to write and run scripts in the same console, which allows for quick debugging.</p>

          <p>We can run PowerShell scripts in a variety of ways. If we know the functions, we can run the script either locally or after loading into memory with a download cradle like the below example.</p>

          <h5>
            PS C:\htb> .\PowerView.ps1;Get-LocalGroup |fl<br>
            <br>
            Description : Users of Docker Desktop<br>
            Name : docker-users<br>
            SID : S-1-5-21-674899381-4069889467-2080702030-1004<br>
            PrincipalSource : Local<br>
            ObjectClass : Group<br>
            <br>
            Description : VMware User Group<br>
            Name : __vmware__<br>
            SID : S-1-5-21-674899381-4069889467-2080702030-1003<br>
            PrincipalSource : Local<br>
            ObjectClass : Group<br>
            <br>
            Description : Members of this group can remotely query authorization attributes and permissions for resources on
            this computer.<br>
            Name : Access Control Assistance Operators<br>
            SID : S-1-5-32-579<br>
            PrincipalSource : Local<br>
            ObjectClass : Group<br>
            <br>
            Description : Administrators have complete and unrestricted access to the computer/domain<br>
            Name : Administrators<br>
            SID : S-1-5-32-544<br>
            PrincipalSource : Local
          </h5>

          <p>One common way to work with a script in PowerShell is to import it so that all functions are then available within our current PowerShell console session: Import-Module .\PowerView.ps1. We can then either start a command and cycle through the options or type Get-Module to list all loaded modules and their associated commands.</p>

          <h5>
            PS C:\htb> Get-Module | select Name,ExportedCommands | fl<br>
            <br>
            Name : Appx<br>
            ExportedCommands : {[Add-AppxPackage, Add-AppxPackage], [Add-AppxVolume, Add-AppxVolume], [Dismount-AppxVolume,
            Dismount-AppxVolume], [Get-AppxDefaultVolume, Get-AppxDefaultVolume]...}<br>
            <br>
            Name : Microsoft.PowerShell.LocalAccounts<br>
            ExportedCommands : {[Add-LocalGroupMember, Add-LocalGroupMember], [Disable-LocalUser, Disable-LocalUser],
            [Enable-LocalUser, Enable-LocalUser], [Get-LocalGroup, Get-LocalGroup]...}<br>
            <br>
            Name : Microsoft.PowerShell.Management<br>
            ExportedCommands : {[Add-Computer, Add-Computer], [Add-Content, Add-Content], [Checkpoint-Computer,
            Checkpoint-Computer], [Clear-Content, Clear-Content]...}<br>
            <br>
            Name : Microsoft.PowerShell.Utility<br>
            ExportedCommands : {[Add-Member, Add-Member], [Add-Type, Add-Type], [Clear-Variable, Clear-Variable], [Compare-Object,
            Compare-Object]...}<br>
            <br>
            Name : PSReadline<br>
            ExportedCommands : {[Get-PSReadLineKeyHandler, Get-PSReadLineKeyHandler], [Get-PSReadLineOption,
            Get-PSReadLineOption], [Remove-PSReadLineKeyHandler, Remove-PSReadLineKeyHandler],
            [Set-PSReadLineKeyHandler, Set-PSReadLineKeyHandler]...}
          </h5>

          <h4>Execution Policy</h4>

          <p>Sometimes we will find that we are unable to run scripts on a system. This is due to a security feature called the execution policy, which attempts to prevent the execution of malicious scripts. The possible policies are:
          <ul>
            <li><b>AllSigned</b> - All scripts can run, but a trusted publisher must sign scripts and configuration files. This includes both remote and local scripts. We receive a prompt before running scripts signed by publishers that we have not yet listed as either trusted or untrusted.</li>
            <lI><b>Bypass</b> - No scripts or configuration files are blocked, and the user receives no warnings or prompts.</lI>
            <li><b>Default</b> - This sets the default execution policy, Restricted for Windows desktop machines and RemoteSigned for Windows servers.</li>
            <li><b>RemoteSigned</b> - Scripts can run but requires a digital signature on scripts that are downloaded from the internet. Digital signatures are not required for scripts that are written locally.</li>
            <li><b>Restricted</b> - This allows individual commands but does not allow scripts to be run. All script file types, including configuration files (.ps1xml), module script files (.psm1), and PowerShell profiles (.ps1) are blocked.</li>
            <li><b>Undefined</b> - No execution policy is set for the current scope. If the execution policy for ALL scopes is set to undefined, then the default execution policy of Restricted will be used.</li>
            <li><b>Unrestricted</b> - This is the default execution policy for non-Windows computers, and it cannot be changed. This policy allows for unsigned scripts to be run but warns the user before running scripts that are not from the local intranet zone.</li>
          </ul>

          <p>Below is an example of the current execution policy for all scopes.</p>

          <h5>
            PS C:\htb> Get-ExecutionPolicy -List<br>
            <br>
            Scope ExecutionPolicy<br>
            ----- ---------------<br>
            MachinePolicy - Undefined<br>
            UserPolicy - Undefined<br>
            Process - Undefined<br>
            CurrentUser - Undefined<br>
            LocalMachine - RemoteSigned
          </h5>

          <p>The execution policy is not meant to be a security control that restricts user actions. A user can easily bypass the policy by either typing the script contents directly into the PowerShell window, downloading and invoking the script, or specifying the script as an encoded command. It can also be bypassed by adjusting the execution policy (if the user has the proper rights) or setting the execution policy for the current process scope (which can be done by almost any user as it does not require a configuration change and will only be set for the duration of the user's session).</p>

          <p>Below is an example of changing the execution policy for the current process (session).</p>

          <h5>PS C:\htb> Set-ExecutionPolicy Bypass -Scope Process</h5>

          <h4>Execution Policy Change</h4>

          <p>The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose
            you to the security risks described in the about_Execution_Policies help topic at
            <a href="https:/go.microsoft.com/fwlink/?LinkID=135170"><b><em>Execution Policy</em></b></a>.<br>
            Do you want to change the execution policy?<br>
            [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "N"): Y
          </p>

          <p>We can now see that the execution policy has been changed.</p>

          <h5>
            PS C:\htb> Get-ExecutionPolicy -List<br>
            <br>
            Scope ExecutionPolicy<br>
            ----- ---------------<br>
            MachinePolicy Undefined<br>
            UserPolicy Undefined<br>
            Process Bypass<br>
            CurrentUser Undefined<br>
            LocalMachine RemoteSigned
          </h5>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../windowsFundamentals.htm">Windows Fundamentals</a></h4>
          <ol>
            <li><a href="introduction.htm">Introduction to Windows</a></li>
            <li><a href="operatingSystemStructure.htm">Operating System Structure</a></li>
            <li><a href="fileSystem.htm">File System</a></li>
            <li><a href="ntfSharePermissions.htm">NTFS vs. Share Permissions</a></li>
            <li><a href="servicesProcesses.htm">Windows Services and Processes</a></li>
            <li><a href="servicePermissions.htm">Service Permissions</a></li>
            <li><a href="windowsSessions.htm">Windows Sessions</a></li>
            <li><a href="interactingOperatingSystem.htm"><b><em>~ Interacting with the Windows Operating System</em></b></a></li>
            <li><a href="managementInstrumentation.htm">Windows Management Instrumentations (WMI)</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>