<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Over The Wire | Krypton</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>
    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Over The Wire</a>
        </h3>
        <hr>

        <div id="labs-table">
          <h4><a href="../krypton.htm">Krypton</a></h4>
          <ul>
            <li><a href="krypton5.htm">Level 5</a></li>
            <li><a href="krypton6.htm"><b><em>~ Level 6</em></b></a></li>
            <li><a href="krypton7.htm">Level 7</a></li>
          </ul>
        </div>
        <hr>

        <div>
          <h4>Host: krypton.labs.overthewire.org</h4>
          <h4>Port: 2231</h4>
        </div>
        <hr>

        <div>

          <h3>Krypton Level 6</h3>

          <h4>Objective</h4>

          <h5>
            ssh krypton6@krypton.labs.overthewire.org -p 2231<br>
            RANDOM
          </h5>

          <p>Hopefully by now its obvious that encryption using repeating keys is a bad idea. Frequency analysis can destroy repeating/fixed key substitution crypto.</p>

          <p>A feature of good crypto is random ciphertext. A good cipher must not reveal any clues about the plaintext. Since natural language plaintext (in this case, English) contains patterns, it is left up to the encryption key or the encryption algorithm to add the ‘randomness’.</p>

          <p>Modern ciphers are similar to older plain substitution ciphers, but improve the ‘random’ nature of the key.</p>

          <p>An example of an older cipher using a complex, random, large key is a vigniere using a key of the same size of the plaintext. For example, imagine you and your confident have agreed on a key using the book ‘A Tale of Two Cities’ as your key, in 256 byte blocks.</p>

          <p>The cipher works as such:
          <ul>
            <li>Each plaintext message is broken into 256 byte blocks. For each block of plaintext, a corresponding 256 byte block from the book is used as the key, starting from the first chapter, and progressing. No part of the book is ever re-used as key. The use of a key of the same length as the plaintext, and only using it once is called a “One Time Pad”.</li>
          </ul>

          <p>Look in the krypton6 directory. You will find a file called ‘plain1’, a 256 byte block. You will also see a file ‘key1’, the first 256 bytes of ‘A Tale of Two Cities’. The file ‘cipher1’ is the cipher text of plain1. As you can see (and try) it is very difficult to break the cipher without the key knowledge.</p>

          <p>If the encryption is truly random letters, and only used once, then it is impossible to break. A truly random “One Time Pad” key cannot be broken. Consider intercepting a ciphertext message of 1000 bytes. One could brute force for the key, but due to the random key nature, you would produce every single valid 1000 letter plaintext as well. Who is to know which is the real plaintext?!?</p>

          <p>Choosing keys that are the same size as the plaintext is impractical. Therefore, other methods must be used to obscure ciphertext against frequency analysis in a simple substitution cipher. The impracticality of an ‘infinite’ key means that the randomness, or entropy, of the encryption is introduced via the method.</p>

          <p>We have seen the method of ‘substitution’. Even in modern crypto, substitution is a valid technique. Another technique is ‘transposition’, or swapping of bytes.</p>

          <p>Modern ciphers break into two types; symmetric and asymmetric.</p>

          <p>Symmetric ciphers come in two flavours: block and stream.</p>

          <p>Until now, we have been playing with classical ciphers, approximating ‘block’ ciphers. A block cipher is done in fixed size blocks (suprise!). For example, in the previous paragraphs we discussed breaking text and keys into 256 byte blocks, and working on those blocks. Block ciphers use a fixed key to perform substituion and transposition ciphers on each block discretely.</p>

          <p>Its time to employ a stream cipher. A stream cipher attempts to create an on-the-fly ‘random’ keystream to encrypt the incoming plaintext one byte at a time. Typically, the ‘random’ key byte is xor’d with the plaintext to produce the ciphertext. If the random keystream can be replicated at the recieving end, then a further xor will produce the plaintext once again.</p>

          <p>From this example forward, we will be working with bytes, not ASCII text, so a hex editor/dumper like hexdump is a necessity. Now is the right time to start to learn to use tools like cryptool.</p>

          <p>In this example, the keyfile is in your directory, however it is not readable by you. The binary ‘encrypt6’ is also available. It will read the keyfile and encrypt any message you desire, using the key AND a ‘random’ number. You get to perform a ‘known ciphertext’ attack by introducing plaintext of your choice. The challenge here is not simple, but the ‘random’ number generator is weak.</p>

          <p>As stated, it is now that we suggest you begin to use public tools, like cryptool, to help in your analysis. You will most likely need a hint to get going. See ‘HINT1’ if you need a kicktstart.</p>

          <p>If you have further difficulty, there is a hint in ‘HINT2’.</p>

          <p>The password for level 7 (krypton7) is encrypted with ‘encrypt6’.</p>

          <p>Good Luck!</p>

          <h4>CLI</h4>

          <h5>
            krypton6@bandit:~$ cd /krypton/krypton6<br>
            krypton6@bandit:/krypton/krypton6$ ls<br>
            encrypt6 HINT1 HINT2 keyfile.dat krypton7 onetime README<br>
            krypton6@bandit:/krypton/krypton6$ mktemp -d<br>
            /tmp/tmp.s8BXQat15e<br>
            krypton6@bandit:/krypton/krypton6$ cd /tmp/tmp.s8BXQat15e<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ ln -s /krypton/krypyon6/keyfile.dat<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ ls<br>
            keyfile.dat<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ chmod 777 .<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ ls /krypton/krypton6<br>
            encrypt6 HINT1 HINT2 keyfile.dat krypton7 onetime README<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ cd ../<br>
            krypton6@bandit:/tmp$ cd ../<br>
            krypton6@bandit:/$ ls<br>
            bin formulaone lib.usr-is-merged proc srv<br>
            bin.usr-is-merged home libx32 root sys<br>
            boot krypton lost+found run tmp<br>
            dev lib media sbin usr<br>
            drifter lib32 mnt sbin.usr-is-merged var<br>
            etc lib64 opt snap<br>
            krypton6@bandit:/$ cd /krypton/krypton6<br>
            krypton6@bandit:/krypton/krypton6$ ls -li<br>
            total 48<br>
            2097183 -rwsr-x--- 1 krypton7 krypton6 16520 Sep 19 07:10 encrypt6<br>
            2097186 -rw-r----- 1 krypton6 krypton6 164 Sep 19 07:10 HINT1<br>
            2097187 -rw-r----- 1 krypton6 krypton6 11 Sep 19 07:10 HINT2<br>
            2097188 -rw-r----- 1 krypton7 krypton7 11 Sep 19 07:10 keyfile.dat<br>
            2097185 -rw-r----- 1 krypton6 krypton6 15 Sep 19 07:10 krypton7<br>
            2097189 drwxr-xr-x 2 root root 4096 Sep 19 07:10 onetime<br>
            2097184 -rw-r----- 1 krypton6 krypton6 4342 Sep 19 07:10 README<br>
            krypton6@bandit:/krypton/krypton6$ cat HINT1<br>
            <br>
            The 'random' generator has a limited number of bits, and is periodic.<br>
            Entropy analysis and a good look at the bytes in a hex editor will help.<br>
            There is a pattern!<br>
            <br>
            krypton6@bandit:/krypton/krypton6$ cat HINT2<br>
            <br>
            8 bit LFSR<br>
            <br>
            krypton6@bandit:/krypton/krypton6$ cd /tmp/tmp.s8BXQat15e<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ python3 -c "print('A'*100)"<br>
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ python3 -c "print('A'*100)" > a.txt<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ cat a.txt<br>
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ cat cipher_a.txt<br>
            EICTDGYIYZKTHNSIRFXYCPFUEOCKRNEICTDGYIYZ<br>
            krypton6@bandit:/tmp/tmp.s8BXQat15e$ cat /krypton/krypton6/krypton7<br>
            PNUKLYLWRQKGKBEkrypton6@bandit:/tmp/tmp.s8BXQat15e$
          </h5>

          <h5>
            ciphertext = 'PNUKLYLWRQKGKBE'<br>
            key = 'EICTDGYIYZKTHNSIRFXYCPFUEOCKRN'<br>
            <br>
            for c, k in zip(ciphertext, key):<br>
            p = ord('A') + ((ord(c) - ord(k)) % 26)<br>
            print(chr(p), end='')<br>
            print()<br>
            LFSRISNOTRANDOM
          </h5>

        </div>
        <hr>

        <div>
          <h4><a href="../krypton.htm">Krypton</a></h4>
          <ol>
            <li><a href="krypton0.htm">Level 0</a></li>
            <li><a href="krypton1.htm">Level 1</a></li>
            <li><a href="krypton2.htm">Level 2</a></li>
            <li><a href="krypton3.htm">Level 3</a></li>
            <li><a href="krypton4.htm">Level 4</a></li>
            <li><a href="krypton5.htm">Level 5</a></li>
            <li><a href="krypton6.htm"><b><em>~ Level 6</em></b></a></li>
            <li><a href="krypton7.htm">Level 7</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>