<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Over The Wire | Krypton</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--
  _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>
    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Over The Wire</a>
        </h3>
        <hr>

        <div id="labs-table">
          <h4><a href="../krypton.htm">Krypton</a></h4>
          <ul>
            <li><a href="krypton7.htm">Level 7</a></li>
            <li><a href="kryptonResources.htm"><b><em>~ Resouces</em></b></a></li>
          </ul>
        </div>
        <hr>

        <div>
          <h4>Host: krypton.labs.overthewire.org</h4>
          <h4>Port: 2231</h4>
        </div>
        <hr>

        <div>

          <h3>Resources</h3>

          <p>ROT13 is an easy substitution cryptosystem based on the Caesar cipher but with 13 as the key. This key has the advantage that the encryption function is the same as the decryption function for the Latin alphabet with 26 letters. This also exists for the 10 digits and is called ROT5.</p>

          <p>The Caesar cipher is a shift cipher, meaning the letters are shifted by a certain number (the key). For example, with k=1, you encrypt A as B, B as C and so on until Z will be encrypted as A.</p>

          <p>The bash command alias allows you to create shorter names for common commands. The structure is: alias "alias_name"="lang_common_command"</p>

          <p>tr is the translate command. It allows you to replace or delete characters. It is used in UNIX pipes (find out more see [Bandit Level 6]https://mayadevbe.me/posts/overthewire/bandit/level6/). The structure for replacing characters is the following: tr '"initial_chars"' 'replacement_chars'. For example echo 'A' | tr 'A' 'a' would return a.</p>

          <p>The Caesar Cipher is a shift cipher, meaning the letters are shifted by a certain number (the key). For example, with k=1, you encrypt A as B, B as C and so on until Z will be encrypted as A. Calculating the encryption key is easy, when knowing just one letter pair of the message (original) and cipher text (encrypted). Taking the example from above: ‘A’ to ‘B’ is ‘1 -> 2’. The key is just the difference ‘1+x=2’ (as long as it does not wrap around). To calculate the decryption key from the encryption key, you can do the following: amount of characters - encryption_key = decryption_key. So the example would be ‘26-1=25’. Meaning, you need to shift ‘B’ by 25 to get ‘A’ again. (2+25= 27 mod 26 = 1). Here ‘mod’ is revering to the modulo operation that is the remainder of a division. It is needed because the number needs to be between 1 and 26 to be mapped to a letter of the alphabet.</p>

          <p>The problem with using one key repeatedly on a block of letters is that there will be a pattern. The more text will be encrypted with the same key the easier it is to find the pattern. Meaning, for different languages we can guess the key based on looking at the character with the biggest amount and assuming it is the character that is used most often in the English language. Quick googling will tell us that is the letter ’e’. This is based on the letter frequency and its entropy. It is used to do Frequency analysis. This is a method to break classical ciphers. Basically, you just count all letters (sometimes also combinations of letters) and based on how often they appear you assign them in order of the most frequent letters of the language.</p>

          <p>The task explanation gives a short explanation of what a Vigenère Cipher is. The Caesar cipher is a simplification of the Vigenère Cipher. Instead of one number that is used to encrypt the whole text, the Vigenère Cipher uses a secret key. This key is used to encrypt blocks of the length of the key. It is generally a word, however, for encryption the letters will be exchanged with their position in the alphabet. Therefore if the key would be length one, it would be the Caesar cipher.</p>

          <p>The Kasiski examination is an attack on polyalphabetic cipher that makes it possible to guess the key length. The method looks for repeated sequences and their offsets/distances. The greatest common divisor of the offsets would most likely be the key length.</p>

          <p>This level introduces the notion of repeating keys as insecure, as Frequency Analysis can be used to quickly determine the key, and we've been using block ciphers. We're now moving on to the world of stream ciphers which are another type of symmetric cipher.</p>

          <p>These ciphers create random keys, which are then used to encrypt one character at a time, typically using an XOR function, combining the output with the keystream. In this level, we're introduced to the notion of Linear-Feedback Shift Registers. These take taps off the binary data and XOR them together to get a result. The result of this function is then pushed onto the end of the binary blob, where the digit on the other end is dropped off. Computerphile has a great video that explains it further here.
          <ul>
            <li><a href="https://www.eetimes.com/tutorial-linear-feedback-shift-registers-lfsrs-part-1/">https://www.eetimes.com/tutorial-linear-feedback-shift-registers-lfsrs-part-1/</a></li>

            <li><a href="https://www.youtube.com/watch?v=Ks1pw1X22y4">https://www.youtube.com/watch?v=Ks1pw1X22y4</a></li>
          </ul>

        </div>
        <hr>

        <div>
          <h4><a href="../krypton.htm">Krypton</a></h4>
          <ol>
            <li><a href="krypton0.htm">Level 0</a></li>
            <li><a href="krypton1.htm">Level 1</a></li>
            <li><a href="krypton2.htm">Level 2</a></li>
            <li><a href="krypton3.htm">Level 3</a></li>
            <li><a href="krypton4.htm">Level 4</a></li>
            <li><a href="krypton5.htm">Level 5</a></li>
            <li><a href="krypton6.htm">Level 6</a></li>
            <li><a href="krypton7.htm">Level 7</a></li>
            <li><a href="kryptonResources.htm"><b><em>~ Resouces</em></b></a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>