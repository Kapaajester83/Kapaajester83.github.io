<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Linux Fundamentals</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--   _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ul>
            <li><a href="packageManagement.htm">Package Management</a></li>
            <li><a href="proccessManagement.htm"><b><em>~ Service Proccess Management</em></b></a></li>
            <li><a href="taskScheduling.htm">Task Scheduling</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Service and Process Management</em></h3>

          <p>In general, there are two types of services: internal, the relevant services that are required at system startup, which for example, perform hardware-related tasks, and services that are installed by the user, which usually include all server services. Such services run in the background without any user interaction. These are also called daemons and are identified by the letter 'd' at the end of the program name, for example, sshd or systemd.</p>

          <p>Most Linux distributions have now switched to systemd. This daemon is an Init process started first and thus has the process ID (PID) 1. This daemon monitors and takes care of the orderly starting and stopping of other services. All processes have an assigned PID that can be viewed under /proc/ with the corresponding number. Such a process can have a parent process ID (PPID), and if so, it is known as the child process.</p>

          <p>Besides systemctl we can also use update-rc.d to manage SysV init script links. Let us have a look at some examples. We will use the OpenSSH server in these examples. If we do not have this installed, please install it before proceeding to this section.</p>

          <h4>Systemctl</h4>

          <p>After installing OpenSSH on our VM, we can start the service with the following command.</p>

          <h5>kalijester68@htb[/htb]$ systemctl start ssh</h5>

          <p>After we have started the service, we can now check if it runs without errors.</p>

          <h5>
            kalijester68@htb[/htb]$ systemctl status ssh<br>
            ssh.service - OpenBSD Secure Shell server<br>
            Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)<br>
            Active: active (running) since Thu 2020-05-14 15:08:23 CEST; 24h ago<br>
            Main PID: 846 (sshd)<br>
            Tasks: 1 (limit: 4681)<br>
            CGroup: /system.slice/ssh.service<br>
            └─846 /usr/sbin/sshd -D<br>
            <br>
            Mai 14 15:08:22 inlane systemd[1]: Starting OpenBSD Secure Shell server...<br>
            Mai 14 15:08:23 inlane sshd[846]: Server listening on 0.0.0.0 port 22.<br>
            Mai 14 15:08:23 inlane sshd[846]: Server listening on :: port 22.<br>
            Mai 14 15:08:23 inlane systemd[1]: Started OpenBSD Secure Shell server.<br>
            Mai 14 15:08:30 inlane systemd[1]: Reloading OpenBSD Secure Shell server.<br>
            Mai 14 15:08:31 inlane sshd[846]: Received SIGHUP; restarting.<br>
            Mai 14 15:08:31 inlane sshd[846]: Server listening on 0.0.0.0 port 22.<br>
            Mai 14 15:08:31 inlane sshd[846]: Server listening on :: port 22.
          </h5>

          <p>To add OpenSSH to the SysV script to tell the system to run this service after startup, we can link it with the following command:</p>

          <h5>
            kalijester68@htb[/htb]$ systemctl enable ssh<br>
            Synchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-sysv-install.<br>
            Executing: /lib/systemd/systemd-sysv-install enable ssh
          </h5>

          <p>Once we reboot the system, the OpenSSH server will automatically run. We can check this with a tool called ps.</p>

          <h5>
            kalijester68@htb[/htb]$ ps -aux | grep ssh<br>
            root 846 0.0 0.1 72300 5660 ? Ss Mai14 0:00 /usr/sbin/sshd -D
          </h5>

          <p>We can also use systemctl to list all services.</p>

          <h5>
            kalijester68@htb[/htb]$ systemctl list-units --type=service<br>
            <br>
            UNIT LOAD ACTIVE SUB DESCRIPTION<br>
            accounts-daemon.service loaded active running Accounts Service<br>
            acpid.service loaded active running ACPI event daemon<br>
            apache2.service loaded active running The Apache HTTP Server<br>
            apparmor.service loaded active exited AppArmor initialization<br>
            apport.service loaded active exited LSB: automatic crash repor<br>
            avahi-daemon.service loaded active running Avahi mDNS/DNS-SD Stack<br>
            bolt.service loaded active running Thunderbolt system service
          </h5>

          <p>It is quite possible that the services do not start due to an error. To see the problem, we can use the tool journalctl to view the logs.</p>

          <h5>
            kalijester68@htb[/htb]$ journalctl -u ssh.service --no-pager<br>
            <br>
            -- Logs begin at Wed 2020-05-13 17:30:52 CEST, end at Fri 2020-05-15 16:00:14 CEST. --<br>
            Mai 13 20:38:44 inlane systemd[1]: Starting OpenBSD Secure Shell server...<br>
            Mai 13 20:38:44 inlane sshd[2722]: Server listening on 0.0.0.0 port 22.<br>
            Mai 13 20:38:44 inlane sshd[2722]: Server listening on :: port 22.<br>
            Mai 13 20:38:44 inlane systemd[1]: Started OpenBSD Secure Shell server.<br>
            Mai 13 20:39:06 inlane sshd[3939]: Connection closed by 10.22.2.1 port 36444 [preauth]<br>
            Mai 13 20:39:27 inlane sshd[3942]: Accepted password for master from 10.22.2.1 port 36452 ssh2<br>
            Mai 13 20:39:27 inlane sshd[3942]: pam_unix(sshd:session): session opened for user master by (uid=0)<br>
            Mai 13 20:39:28 inlane sshd[3942]: pam_unix(sshd:session): session closed for user master<br>
            Mai 14 02:04:49 inlane sshd[2722]: Received signal 15; terminating.<br>
            Mai 14 02:04:49 inlane systemd[1]: Stopping OpenBSD Secure Shell server...<br>
            Mai 14 02:04:49 inlane systemd[1]: Stopped OpenBSD Secure Shell server.<br>
            -- Reboot --
          </h5>

          <h4>Kill a Process</h4>

          <p>A process can be in the following states:
          <ul>
            <li>Running</li>
            <li>Waiting (waiting for an event or system resource)</li>
            <li>Stopped</li>
            <li>Zombie (stopped but still has an entry in the process table).</li>
          </ul>

          <p>Processes can be controlled using kill, pkill, pgrep, and killall. To interact with a process, we must send a signal to it. We can view all signals with the following command:</p>

          <h5>
            kalijester68@htb[/htb]$ kill -l
          </h5>

          <p>The most commonly used are:
          <ul>
            <li>1 SIGHUP - This is sent to a process when the terminal that controls it is closed.</li>
            <li>2 SIGINT - Sent when a user presses [Ctrl] + C in the controlling terminal to interrupt a process.</li>
            <li>3 SIGQUIT - Sent when a user presses [Ctrl] + D to quit.</li>
            <li>9 SIGKILL - Immediately kill a process with no clean-up operations.</li>
            <li>15 SIGTERM - Program termination.</li>
            <li>19 SIGSTOP - Stop the program. It cannot be handled anymore.</li>
            <li>20 SIGTSTP - Sent when a user presses [Ctrl] + Z to request for a service to suspend. The user can handle it afterward.</li>
          </ul>

          <p>For example, if a program were to freeze, we could force to kill it with the following command:</p>

          <h5>kalijester68@htb[/htb]$ kill 9 "PID"</h5>

          <h4>Background a Process</h4>

          <p>Sometimes it will be necessary to put the scan or process we just started in the background to continue using the current session to interact with the system or start other processes. As we have already seen, we can do this with the shortcut [Ctrl + Z]. As mentioned above, we send the SIGTSTP signal to the kernel, which suspends the process.</p>

          <h5>
            kalijester68@htb[/htb]$ ping -c 10 www.hackthebox.eu<br>
            kalijester68@htb[/htb]$ vim tmpfile
          </h5>

          <p>Now all background processes can be displayed with the following command.</p>

          <h5>kalijester68@htb[/htb]$ jobs</h5>

          <p>The [Ctrl] + Z shortcut suspends the processes, and they will not be executed further. To keep it running in the background, we have to enter the command bg to put the process in the background.</p>

          <h5>
            kalijester68@htb[/htb]$ bg<br>
            kalijester68@htb[/htb]$ <br>
            --- www.hackthebox.eu ping statistics ---<br>
            10 packets transmitted, 0 received, 100% packet loss, time 113482ms
          </h5>

          <p>Another option is to automatically set the process with an AND sign (&) at the end of the command.</p>

          <h5>kalijester68@htb[/htb]$ ping -c 10 www.hackthebox.eu &</h5>

          <p>Once the process finishes, we will see the results.</p>

          <h5>
            kalijester68@htb[/htb]$<br>
            <br>
            --- www.hackthebox.eu ping statistics ---<br>
            10 packets transmitted, 0 received, 100% packet loss, time 9210ms
          </h5>

          <h4>Foreground a Process</h4>

          <p>After that, we can use the jobs command to list all background processes. Backgrounded processes do not require user interaction, and we can use the same shell session without waiting until the process finishes first. Once the scan or process finishes its work, we will get notified by the terminal that the process is finished.</p>

          <h5>kalijester68@htb[/htb]$ jobs</h5>

          <p>If we want to get the background process into the foreground and interact with it again, we can use the fg "ID" command.</p>

          <h5>
            kalijester68@htb[/htb]$ fg 1<br>
            ping -c 10 www.hackthebox.eu<br>
            <br>
            --- www.hackthebox.eu ping statistics ---<br>
            10 packets transmitted, 0 received, 100% packet loss, time 9206ms
          </h5>

          <h4>Execute Multiple Commands</h4>

          <p>There are three possibilities to run several commands, one after the other. These are separated by:
          <ul>
            <li>Semicolon (;)</li>
            <li>Double ampersand characters (&&)</li>
            <li>Pipes (|)</li>
          </ul>

          <p>The difference between them lies in the previous processes' treatment and depends on whether the previous process was completed successfully or with errors. The semicolon (;) is a command separator and executes the commands by ignoring previous commands' results and errors.</p>

          <h5>
            kalijester68@htb[/htb]$ echo '1'; echo '2'; echo '3'<br>
            <br>
            1<br>
            2<br>
            3
          </h5>

          <p>For example, if we execute the same command but replace it in second place, the command ls with a file that does not exist, we get an error, and the third command will be executed nevertheless.</p>

          <h5>
            kalijester68@htb[/htb]$ echo '1'; ls MISSING_FILE; echo '3'<br>
            <br>
            1<br>
            ls: cannot access 'MISSING_FILE': No such file or directory<br>
            3
          </h5>

          <p>However, it looks different if we use the double AND characters (&&) to run the commands one after the other. If there is an error in one of the commands, the following ones will not be executed anymore, and the whole process will be stopped.</p>

          <h5>
            kalijester68@htb[/htb]$ echo '1' && ls MISSING_FILE && echo '3'<br>
            <br>
            1<br>
            ls: cannot access 'MISSING_FILE': No such file or directory
          </h5>

          <p>Pipes (|) depend not only on the correct and error-free operation of the previous processes but also on the previous processes' results.</p>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ol>
            <li><a href="linuxStructure.htm">Linux Structure</a></li>
            <li><a href="linuxDistributions.htm">Linux Distributions</a></li>
            <li><a href="shell.htm">Introduction to Shell</a></li>
            <li><a href="promptDescription.htm">Prompt Description</a></li>
            <li><a href="gettingHelp.htm">Getting Help</a></li>
            <li><a href="systemInformation.htm">System Information</a></li>
            <li><a href="navigation.htm">Navigation</a></li>
            <li><a href="filesDirectories.htm">Working with Files and Directories</a></li>
            <li><a href="editingFiles.htm">Editing Files</a></li>
            <li><a href="findFilesDirectories.htm">Find Files and Directories</a></li>
            <li><a href="redirection.htm">File Description and Redirection</a></li>
            <li><a href="filterContents.htm">Filter Contents</a></li>
            <li><a href="regularExpressions.htm">Regular Expressions</a></li>
            <li><a href="permissionManagement.htm">Permission Management</a></li>
            <li><a href="userManagement.htm">User Management</a></li>
            <li><a href="packageManagement.htm">Package Management</a></li>
            <li><a href="proccessManagement.htm"><b><em>~ Service Proccess Management</em></b></a></li>
            <li><a href="taskScheduling.htm">Task Scheduling</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>