<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Linux Fundamentals</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--   _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ul>
            <li><a href="proccessManagement.htm">Service Proccess Management</a></li>
            <li><a href="taskScheduling.htm"><b><em>~ Task Scheduling</em></b></a></li>
            <li><a href="networkingServices.htm">Networking Services</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Task Scheduling</em></h3>

          <p>Task scheduling is a feature in Linux systems that allows users to schedule and automate tasks. It allows administrators and users to run tasks at a specific time or within specific frequencies without having to start them manually. It can be used in Linux systems such as Ubuntu, Redhat Linux, and Solaris to manage a variety of tasks. Examples include automatically updating software, running scripts, cleaning databases, and automating backups. This also allows users to schedule regular and repetitive tasks to ensure they are run regularly. In addition, alerts can be set up to display when certain events occur or to contact administrators or users. There are many different use cases for automation of this type, but these cover most cases.</p>

          <h4>Systemd</h4>

          <p>Systemd is a service used in Linux systems such as Ubuntu, Redhat Linux, and Solaris to start processes and scripts at a specific time. With it, we can set up processes and scripts to run at a specific time or time interval and can also specify specific events and triggers that will trigger a specific task. To do this, we need to take some steps and precautions before our scripts or processes are automatically executed by the system.
          <ul>
            <li>Create a timer</li>
            <li>Create a service</li>
            <li>Activate the timer</li>
          </ul>

          <h4>Create a Timer</h4>

          <p>To create a timer for systemd, we need to create a directory where the timer script will be stored.</p>

          <h5>
            kalijester68@htb[/htb]$ sudo mkdir /etc/systemd/system/mytimer.timer.d<br>
            kalijester68@htb[/htb]$ sudo vim /etc/systemd/system/mytimer.timer
          </h5>

          <p>Next, we need to create a script that configures the timer. The script must contain the following options: "Unit", "Timer" and "Install". The "Unit" option specifies a description for the timer. The "Timer" option specifies when to start the timer and when to activate it. Finally, the "Install" option specifies where to install the timer.</p>

          <h5>
            Mytimer.timer<br>
            Code: txt<br>
            <br>
            [Unit]<br>
            Description=My Timer<br>
            <br>
            [Timer]<br>
            OnBootSec=3min<br>
            OnUnitActiveSec=1hour<br>
            <br>
            [Install]<br>
            WantedBy=timers.target
          </h5>

          <p>Here it depends on how we want to use our script. For example, if we want to run our script only once after the system boot, we should use OnBootSec setting in Timer. However, if we want our script to run regularly, then we should use the OnUnitActiveSec to have the system run the script at regular intervals. Next, we need to create our service.</p>

          <h4>Create a Service</h4>

          <h5>kalijester68@htb[/htb]$ sudo vim /etc/systemd/system/mytimer.service</h5>

          <p>Here we set a description and specify the full path to the script we want to run. The "multi-user.target" is the unit system that is activated when starting a normal multi-user mode. It defines the services that should be started on a normal system startup.</p>

          <h5>
            Code: txt<br>
            <br>
            [Unit]<br>
            Description=My Service<br>
            <br>
            [Service]<br>
            ExecStart=/full/path/to/my/script.sh<br>
            <br>
            [Install]<br>
            WantedBy=multi-user.target
          </h5>

          <p>After that, we have to let systemd read the folders again to include the changes.</p>

          <h4>Reload Systemd</h4>

          <h5>kalijester68@htb[/htb]$ sudo systemctl daemon-reload</h5>

          <p>After that, we can use systemctl to start the service manually and enable the autostart.</p>

          <h4>Start the Timer & Service</h4>

          <h5>
            kalijester68@htb[/htb]$ sudo systemctl start mytimer.service<br>
            kalijester68@htb[/htb]$ sudo systemctl enable mytimer.service
          </h5>

          <h4>Cron</h4>

          <p>Cron is another tool that can be used in Linux systems to schedule and automate processes. It allows users and administrators to execute tasks at a specific time or within specific intervals. For the above examples, we can also use Cron to automate the same tasks. We just need to create a script and then tell the cron daemon to call it at a specific time.</p>

          <p>With Cron, we can automate the same tasks, but the process for setting up the Cron daemon is a little different than Systemd. To set up the cron daemon, we need to store the tasks in a file called crontab and then tell the daemon when to run the tasks. Then we can schedule and automate the tasks by configuring the cron daemon accordingly. The structure of Cron consists of the following components:
          <ul>
            <li>Minutes (0-59) - This specifies in which minute the task should be executed.</li>
            <li>Hours (0-23) - This specifies in which hour the task should be executed.</li>
            <li>Days of month (1-31) - This specifies on which day of the month the task should be executed.</li>
            <li>Months (1-12) - This specifies in which month the task should be executed.</li>
            <li>Days of the week (0-7) - This specifies on which day of the week the task should be executed.</li>
          </ul>

          <p>For example, such a crontab could look like this:</p>

          <h5>
            Code: txt<br>
            <br>
            # System Update<br>
            * */6 * * /path/to/update_software.sh<br>
            <br>
            # Execute scripts<br>
            0 0 1 * * /path/to/scripts/run_scripts.sh<br>
            <br>
            # Cleanup DB<br>
            0 0 * * 0 /path/to/scripts/clean_database.sh<br>
            <br>
            # Backups<br>
            0 0 * * 7 /path/to/scripts/backup.sh
          </h5>

          <p>The "System Update" should be executed every sixth hour. This is indicated by the entry */6 in the hour column. The task is executed by the script update_software.sh, whose path is given in the last column.</p>

          <p>The task execute scripts is to be executed every first day of the month at midnight. This is indicated by the entries 0 and 0 in the minute and hour columns and 1 in the days-of-the-month column. The task is executed by the run_scripts.sh script, whose path is given in the last column.</p>

          <p>The third task, Cleanup DB, is to be executed every Sunday at midnight. This is specified by the entries 0 and 0 in the minute and hour columns and 0 in the days-of-the-week column. The task is executed by the clean_database.sh script, whose path is given in the last column.</p>

          <p>The fourth task, backups, is to be executed every Sunday at midnight. This is indicated by the entries 0 and 0 in the minute and hour columns and 7 in the days-of-the-week column. The task is executed by the backup.sh script, whose path is given in the last column.</p>

          <p>It is also possible to receive notifications when a task is executed successfully or unsuccessfully. In addition, we can create logs to monitor the execution of the tasks.</p>

          <h4>Systemd vs. Cron</h4>

          <p>Systemd and Cron are both tools that can be used in Linux systems to schedule and automate processes. The key difference between these two tools is how they are configured. With Systemd, you need to create a timer and services script that tells the operating system when to run the tasks. On the other hand, with Cron, you need to create a crontab file that tells the cron daemon when to run the tasks.
          </p>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ol>
            <li><a href="linuxStructure.htm">Linux Structure</a></li>
            <li><a href="linuxDistributions.htm">Linux Distributions</a></li>
            <li><a href="shell.htm">Introduction to Shell</a></li>
            <li><a href="promptDescription.htm">Prompt Description</a></li>
            <li><a href="gettingHelp.htm">Getting Help</a></li>
            <li><a href="systemInformation.htm">System Information</a></li>
            <li><a href="navigation.htm">Navigation</a></li>
            <li><a href="filesDirectories.htm">Working with Files and Directories</a></li>
            <li><a href="editingFiles.htm">Editing Files</a></li>
            <li><a href="findFilesDirectories.htm">Find Files and Directories</a></li>
            <li><a href="redirection.htm">File Description and Redirection</a></li>
            <li><a href="filterContents.htm">Filter Contents</a></li>
            <li><a href="regularExpressions.htm">Regular Expressions</a></li>
            <li><a href="permissionManagement.htm">Permission Management</a></li>
            <li><a href="userManagement.htm">User Management</a></li>
            <li><a href="packageManagement.htm">Package Management</a></li>
            <li><a href="proccessManagement.htm">Service Proccess Management</a></li>
            <li><a href="taskScheduling.htm"><b><em>~ Task Scheduling</em></b></a></li>
            <li><a href="networkingServices.htm">Networking Services</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>