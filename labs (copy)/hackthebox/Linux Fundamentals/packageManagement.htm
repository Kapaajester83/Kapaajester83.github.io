<!DOCTYPE html>
<html lang="en-US">

<head>
  <link rel="icon" type="image/png" sizes="48x48" href="../../../favicon.ico">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Hack The Box | Linux Fundamentals</title>
  <meta name="author" content="Kappa">
  <meta name="description" content="Splash">
  <meta name="viewport" content="width=device-width">
  <link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Orbitron:500' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Rochester' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="../../labs.css" type="text/css">
</head>

<body>

  <!--   _  __          _____  _____        
 | |/ /    /\   |  __ \|  __ \ /\    
 | ' /    /  \  | |__) | |__) /  \   
 |  <    / /\ \ |  ___/|  ___/ /\ \  
 | . \  / ____ \| |    | |  / ____ \ 
 |_|\_\/_/    \_\_|    |_| /_/    \_\
 -->

  <div id="page">
    <div id="nav">
      <ul>
        <li><a href="https://kapaajester83.github.io/">Home</a></li>
        <li><a href="https://kapaajester83.github.io/labs/contents.html">Labs</a></li>
        <li><a href="https://duckduckgo.com/" target="_blank">DuckGo</a></li>
        <li><a href="https://github.com/Kapaajester83?tab=repositories" target="_blank">About</a></li>
        <li><a href="mailto:kappajester83@gmail.com" target="_blank">Email</a></li>
      </ul>
    </div>
    <div id="logo">
      <img src="https://kapaajester83.github.io/logo.jpeg" alt="logo">
      <h1>Kappa</h1>

      <div>
        <br>
        <br>
        <br>
        <h2>“Great things are not done by impulse, but by a series of small things brought together.”</h2>
        <br>
        <br>
      </div>

    </div>

    <div>
      <div id="writeup">
        <h3>
          <a href="../../contents.html">Hack The Box</a>
        </h3>
        <hr>

        <div id="labs-table-top">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ul>
            <li><a href="userManagement.htm">User Management</a></li>
            <li><a href="packageManagement.htm"><b><em>~ Package Management</em></b></a></li>
            <li><a href="proccessManagement.htm">Service Proccess Management</a></li>
          </ul>
        </div>
        <hr>

        <div>

          <h3><em>Package Management</em></h3>

          <p>Whether working as a system administrator, maintaining our own Linux machines at home, or building/upgrading/maintaining our penetration testing distribution of choice, it is crucial to have a firm grasp on the available Linux package managers and the various ways to utilize them to install, update, or remove packages. Packages are archives that contain binaries of software, configuration files, information about dependencies and keep track of updates and upgrades. The features that most package management systems provide are:
          <ul>
            <li>Package downloading</li>
            <li>Dependency resolution</li>
            <li>A standard binary package format</li>
            <li>Common installation and configuration locations</li>
            <li>Additional system-related configuration and functionality</li>
            <li>Quality control</li>
          </ul>

          <p>We can use many different package management systems that cover different types of files like ".deb", ".rpm", and others. The package management requirement is that the software to be installed is available as a corresponding package. Typically this is created, offered, and maintained centrally under Linux distributions. In this way, the software is integrated directly into the system, and its various directories are distributed throughout the system. The package management software retrieves the necessary changes for system installation from the package itself and then implements these changes to install the package successfully. If the package management software recognizes that additional packages are required for the proper functioning of the package that has not yet been installed, a dependency is included and either warns the administrator or tries to reload the missing software from a repository, for example, and install it in advance.</p>

          <p>If an installed software has been deleted, the package management system then retakes the package's information, modifies it based on its configuration, and deletes files. There are different package management programs that we can use for this. Here is a list of examples of such programs:
          <ul>
            <li>dpkg - The dpkg is a tool to install, build, remove, and manage Debian packages. The primary and more user-friendly front-end for dpkg is aptitude.</li>

            <li>apt - Apt provides a high-level command-line interface for the package management system.</li>

            <li>aptitude - Aptitude is an alternative to apt and is a high-level interface to the package manager.
              snap Install, configure, refresh, and remove snap packages. Snaps enable the secure distribution of the latest apps and utilities for the cloud, servers, desktops, and the internet of things.
            </li>

            <li>gem - Gem is the front-end to RubyGems, the standard package manager for Ruby.</li>

            <li>pip - Pip is a Python package installer recommended for installing Python packages that are not available in the Debian archive. It can work with version control repositories (currently only Git, Mercurial, and Bazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation.</li>

            <li>git - Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.</li>
          </ul>

          <p>It is highly recommended to set up our virtual machine (VM) locally to experiment with it. Let us experiment a bit in our local VM and extend it with a few additional packages. First, let us install git by using apt.</p>

          <h4>Advanced Package Manager (APT)</h4>

          <p>Debian-based Linux distributions use the APT package manager. A package is an archive file containing multiple ".deb" files. The dpkg utility is used to install programs from the associated ".deb" file. APT makes updating and installing programs easier because many programs have dependencies. When installing a program from a standalone ".deb" file, we may run into dependency issues and need to download and install one or multiple additional packages. APT makes this easier and more efficient by packaging together all of the dependencies needed to install a program.</p>

          <p>Each Linux distribution uses software repositories that are updated often. When we update a program or install a new one, the system queries these repositories for the desired package. Repositories can be labeled as stable, testing, or unstable. Most Linux distributions utilize the most stable or "main" repository. This can be checked by viewing the contents of the /etc/apt/sources.list file. The repository list for Parrot OS is at /etc/apt/sources.list.d/parrot.list.</p>

          <h5>
            kalijester68@htb[/htb]$ cat /etc/apt/sources.list.d/parrot.list
            # parrot repository
            # this file was automatically generated by parrot-mirror-selector
            deb http://htb.deb.parrot.sh/parrot/ rolling main contrib non-free
            #deb-src https://deb.parrot.sh/parrot/ rolling main contrib non-free
            deb http://htb.deb.parrot.sh/parrot/ rolling-security main contrib non-free
            #deb-src https://deb.parrot.sh/parrot/ rolling-security main contrib non-free
          </h5>

          <p>APT uses a database called the APT cache. This is used to provide information about packages installed on our system offline. We can search the APT cache, for example, to find all Impacket related packages.</p>

          <h4>Package Management</h4>

          <h5>
            kalijester68@htb[/htb]$ apt-cache search impacket

            impacket-scripts - Links to useful impacket scripts examples
            polenum - Extracts the password policy from a Windows system
            python-pcapy - Python interface to the libpcap packet capture library (Python 2)
            python3-impacket - Python3 module to easily build and dissect network protocols
            python3-pcapy - Python interface to the libpcap packet capture library (Python 3)
          </h5>

          <p>We can then view additional information about a package.</p>

          <h5>
            kalijester68@htb[/htb]$ apt-cache show impacket-scripts<br>
            Package: impacket-scripts<br>
            Version: 1.4<br>
            Architecture: all<br>
            Maintainer: Kali Developers "devel@kali.org"<br>
            Installed-Size: 13<br>
            Depends: python3-impacket (>= 0.9.20), python3-ldap3 (>= 2.5.0), python3-ldapdomaindump<br>
            Breaks: python-impacket (<< 0.9.18)<br>
              Replaces: python-impacket (<< 0.9.18)<br>
                Priority: optional<br>
                Section: misc<br>
                Filename: pool/main/i/impacket-scripts/impacket-scripts_1.4_all.deb<br>
                Size: 2080
          </h5>

          <p>We can also list all installed packages.</p>

          <h5>
            kalijester68@htb[/htb]$ apt list --installed<br>
            Listing... Done<br>
            accountsservice/rolling,now 0.6.55-2 amd64 [installed,automatic]<br>
            adapta-gtk-theme/rolling,now 3.95.0.11-1 all [installed]<br>
            adduser/rolling,now 3.118 all [installed]<br>
            adwaita-icon-theme/rolling,now 3.36.1-2 all [installed,automatic]<br>
            aircrack-ng/rolling,now 1:1.6-4 amd64 [installed,automatic]
          </h5>

          <p>If we are missing some packages, we can search for it and install it using the following command.</p>

          <h5>
            kalijester68@htb[/htb]$ sudo apt install impacket-scripts -y<br>
            Reading package lists... Done<br>
            Building dependency tree <br>
            Reading state information... Done<br>
            The following NEW packages will be installed:<br>
            impacket-scripts<br>
            0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.<br>
            Need to get 2,080 B of archives.<br>
            After this operation, 13.3 kB of additional disk space will be used.<br>
            Get:1 https://euro2-emea-mirror.parrot.sh/mirrors/parrot rolling/main amd64 impacket-scripts all 1.4 [2,080 B]<br>

            Fetched 2,080 B in 0s (15.2 kB/s)<br>
            Selecting previously unselected package impacket-scripts.<br>
            (Reading database ... 378459 files and directories currently installed.)<br>
            Preparing to unpack .../impacket-scripts_1.4_all.deb ...<br>
            Unpacking impacket-scripts (1.4) ...<br>
            Setting up impacket-scripts (1.4) ...<br>
            Scanning application launchers<br>
            Removing duplicate launchers from Debian<br>
            Launchers are updated
          </h5>

          <h4>Git</h4>

          <p>Now that we have git installed, we can use it to download useful tools from Github. One such project is called 'Nishang'. We will deal with and work with the project itself later. First, we need to navigate to the project's repository and copy the Github link before using git to download it</p>

          <p>Nevertheless, before we download the project and its scripts and lists, we should create a particular folder.</p>

          <h5>
            kalijester68@htb[/htb]$ mkdir ~/nishang/ && git clone https://github.com/samratashok/nishang.git ~/nishang<br>
            Cloning into '/opt/nishang/'...<br>
            remote: Enumerating objects: 15, done.<br>
            remote: Counting objects: 100% (15/15), done.<br>
            remote: Compressing objects: 100% (13/13), done.<br>
            remote: Total 1691 (delta 4), reused 6 (delta 2), pack-reused 1676<br>
            Receiving objects: 100% (1691/1691), 7.84 MiB | 4.86 MiB/s, done.<br>
            Resolving deltas: 100% (1055/1055), done.
          </h5>

          <h4>DPKG</h4>

          <p>We can also download the programs and tools from the repositories separately. In this example, we download 'strace' for Ubuntu 18.04 LTS.</p>

          <h5>
            kalijester68@htb[/htb]$ wget http://archive.ubuntu.com/ubuntu/pool/main/s/strace/strace_4.21-1ubuntu1_amd64.deb<br>
            --2020-05-15 03:27:17-- http://archive.ubuntu.com/ubuntu/pool/main/s/strace/strace_4.21-1ubuntu1_amd64.deb<br>
            Resolving archive.ubuntu.com (archive.ubuntu.com)... 91.189.88.142, 91.189.88.152, 2001:67c:1562::18, ...<br>
            Connecting to archive.ubuntu.com (archive.ubuntu.com)|91.189.88.142|:80... connected.
            HTTP request sent, awaiting response... 200 OK
            Length: 333388 (326K) [application/x-debian-package]
            Saving to: ‘strace_4.21-1ubuntu1_amd64.deb’<br>
            strace_4.21-1ubuntu1_amd64.deb 100%[===================================================================>] 325,57K --.-KB/s in 0,1s<br>
            2020-05-15 03:27:18 (2,69 MB/s) - ‘strace_4.21-1ubuntu1_amd64.deb’ saved [333388/333388]
          </h5>

          <p>
            Furthermore, now we can use both apt and dpkg to install the package. Since we have already worked with apt, we will turn to dpkg in the next example.</p>

          <h5>
            kalijester68@htb[/htb]$ sudo dpkg -i strace_4.21-1ubuntu1_amd64.deb <br>
            (Reading database ... 154680 files and directories currently installed.)<br>
            Preparing to unpack strace_4.21-1ubuntu1_amd64.deb ...<br>
            Unpacking strace (4.21-1ubuntu1) over (4.21-1ubuntu1) ...<br>
            Setting up strace (4.21-1ubuntu1) ...<br>
            Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
          </h5>

          <p>With this, we have already installed the tool and can test if it works properly.</p>

          <h5>kalijester68@htb[/htb]$ strace -h</h5>

          <h4>Optional Exercise:</h4>

          <ul>
            <li>Search for "evil-winrm" tool on Github and install it on our interactive instances. Try all the different installation methods.
            </li>
          </ul>

        </div>
        <hr>

        <div id="labs-table">
          <h4><a href="../linuxFundamentals.htm">Linux Fundamentals</a></h4>
          <ol>
            <li><a href="linuxStructure.htm">Linux Structure</a></li>
            <li><a href="linuxDistributions.htm">Linux Distributions</a></li>
            <li><a href="shell.htm">Introduction to Shell</a></li>
            <li><a href="promptDescription.htm">Prompt Description</a></li>
            <li><a href="gettingHelp.htm">Getting Help</a></li>
            <li><a href="systemInformation.htm">System Information</a></li>
            <li><a href="navigation.htm">Navigation</a></li>
            <li><a href="filesDirectories.htm">Working with Files and Directories</a></li>
            <li><a href="editingFiles.htm">Editing Files</a></li>
            <li><a href="findFilesDirectories.htm">Find Files and Directories</a></li>
            <li><a href="redirection.htm">File Description and Redirection</a></li>
            <li><a href="filterContents.htm">Filter Contents</a></li>
            <li><a href="regularExpressions.htm">Regular Expressions</a></li>
            <li><a href="permissionManagement.htm">Permission Management</a></li>
            <li><a href="userManagement.htm">User Management</a></li>
            <li><a href="packageManagement.htm"><b><em>~ Package Management</em></b></a></li>
            <li><a href="proccessManagement.htm">Service Proccess Management</a></li>
          </ol>
        </div>
        <hr>

      </div>
    </div>
  </div>

  <div id="footer">
    <p>
      Webpage made by <a href="mailto:kappajester83@gmail.com">Kappa </a>
    </p>
  </div>

</html>